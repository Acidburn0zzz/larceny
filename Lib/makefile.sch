; Lib/makefile.sch
; Larceny development system -- makefile for compiling Scheme files.
;
; $Id: makefile.sch,v 1.5 1997/03/05 19:28:51 lth Exp lth $
;
; Procedures to call:
;  make-larceny-heap
;  make-larceny-eheap
;  make-auxlib
;  make-compat
;  make-compiler
;  make-sparcasm
;  make-newasm
;  make-development-system  -- makes auxlib, compat, compiler, sparcasm


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Action procedures for the rules.

(define (make-compile target deps) 
  (display "Compiling ") (display target) (newline)
  (compile313 (car deps) target))

(define (make-assemble target deps)
  (display "Assembling ") (display target) (newline)
  (assemble313 (car deps) target))

(define (make-compile-file target deps)
  (display "Making ") (display target) (newline)
  (compile-file (car deps)))

(define (make-dumpheap target files)
  (display "Dumping ") (display target) (newline)
  (delete-file target)
  (let ((fn (string-append target ".map")))
    (delete-file fn)
    (call-with-output-file fn
      (lambda (p)
	(let ((q (apply build-heap-image target files)))
	  (pretty-print q p))))))

(define (make-copy target src)
  (display "Copying ") (display target) (newline)
  (call-with-input-file (car src)
    (lambda (inp)
      (delete-file target)
      (call-with-output-file target
	(lambda (outp)
	  (let loop ((item (read inp)))
	    (if (eof-object? item)
		#t
		(begin (write item outp)
		       (newline outp)
		       (loop (read inp))))))))))

(define objects
  (lambda (path ext files)
    (map (lambda (n) (string-append path n ext)) files)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Projects for building the basic heap images.

; These are the base names of all the files that make up the basic heap.

(define heap-files 
  '(
    ; Fundamental

    "malcode"           ; real basic things
    "typetags"          ; type tags
    "unix"              ; OS primitives for Unix
    "error0"            ; Boot-time 'error' procedure.
    "primops"           ; primop procedures

    ; general library

    "list"              ; list procedures
    "vector"            ; vector procedures
    "string"            ; string and bytevector procs
    "control"           ; control procedures
    "preds"             ; some predicates
    "oblist"            ; symbol table
    "mcode"             ; millicode support
    "memstats"          ; runtime stats
    "ecodes"            ; exception codes
    "ehandler"          ; exception handler
    "error"             ; error system

    ; Old I/O subsystem

;    "schemeio"          ; I/O system
;    "print"             ; write/display

    ; New I/O subsystem -- not yet properly tested

    "iosys"
    "fileio"
    "conio"
    "stdio"
    "print"             ; write/display
    "ioboot"

    "number"            ; arithmetic
    "globals"           ; 'global' offsets (for gc)

    ; It's important for bellerophon to be loaded as late as possible
    ; because it depends on much of the rest of the system.

    "profile"           ; Profiling code
    "bignums"           ; Bignum support
    "ratnums"           ; Ratnum support
    "rectnums"          ; Rectnum support
    "flonums"           ; Flonum support
    "contag"            ; Contagion
    "num2str"           ; Number printer
    "belle"             ; Algorithm bellerophon
    "str2num"           ; Number parser
    "reader"            ; Reader
    "env"               ; R5RS environments
    "load"              ; Loader
    "go"                ; Driver

    ))

; Files in the bootstrap evaluator, repl, and toplevel env.

(define eval-files
  '("Repl/reploop"      ; Read-eval-print loop
    "Eval/eval"         ; Simple eval procedure (interpreter)
    "Eval/toplevel"     ; Top-level environment
    "Eval/macro-expand" ; Macro expander (for Eval)
    ))

; Files that hold system constants.

(define build-files
  '("Build/except.sh"   ; Exception codes (autogenerated)
    "Build/globals.sh"  ; Global values (autogenerated)
    ))

(define heap-project (make:new-project "larceny.heap"))
(define eheap-project (make:new-project "larceny.eheap"))

; FIXME: the rule for ecodes.sch appears not to work.
; Ditto for globals.

(make:rule heap-project ".lop" ".mal" make-assemble)
(make:rule heap-project ".lop" ".lap" make-assemble)
(make:rule heap-project ".lap" ".sch" make-compile)
(make:rule heap-project ".sch" ".sh" make-copy)
(make:deps heap-project '("larceny.heap") (objects "Lib/" ".lop" heap-files))
(make:deps heap-project '("larceny.heap") (objects "" ".lop" eval-files))
(make:deps heap-project '("Lib/globals.sch") '("Build/globals.sh"))
(make:deps heap-project '("Lib/ecodes.sch") '("Build/except.sh"))
(make:targets heap-project '("larceny.heap") make-dumpheap)

(make:rule eheap-project ".elop" ".mal" make-assemble)
(make:rule eheap-project ".elop" ".lap" make-assemble)
(make:rule eheap-project ".lap" ".sch" make-compile)
(make:rule eheap-project ".sch" ".sh" make-copy)
(make:deps eheap-project '("larceny.eheap")
	   (objects "Lib/" ".elop" heap-files))
(make:deps eheap-project '("larceny.eheap") (objects "" ".elop" eval-files))
(make:deps eheap-project '("Lib/globals.sch") '("Build/globals.sh"))
(make:deps eheap-project '("Lib/ecodes.sch") '("Build/except.sh"))
(make:targets eheap-project '("larceny.eheap") make-dumpheap)

(define (make-larceny-heap . rest)
  (include-source-code #f)
  (include-variable-names #f)
  (include-procedure-names #t)
  (if (not (write-barrier))
      (begin (write-barrier #t)
	     (display "NOTE: Turning on write barrier.")
	     (newline)))
  (make:pretend (not (null? rest)))
  (make:make heap-project "larceny.heap"))

(define (make-larceny-eheap . rest)
  (include-source-code #f)
  (include-variable-names #f)
  (include-procedure-names #t)
  (if (write-barrier)
      (begin (write-barrier #f)
	     (display "NOTE: Turning off write barrier.")
	     (newline)))
  (make:pretend (not (null? rest)))
  (make:make eheap-project "larceny.eheap"))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Project for building all the files in the Compiler subdirectory.

(define compiler-project (make:new-project "compiler.date"))
(define compiler-files '("sets" "pass1.aux" "switches"
			 "twobit.imp" "pass1" "pass2.aux"
			 "pass2p1" "pass2p2" "pass4.aux"
			 "pass4p1" "pass4p2" "pass4p3" "compile313"
			 ; Old assembler driver
			 "assembler" 
			 ; New assembler driver
			 "pass5p1" "pass5p2sparc"
			 "peepopt" "makefasl" "make"
			 ; Heap dumper
			 "dumpheap"))

(make:rule compiler-project ".fasl" ".sch" make-compile-file)
(make:deps compiler-project '("compiler.date") 
	   (objects "Compiler/" ".fasl" compiler-files))
(make:targets compiler-project '("compiler.date") (lambda args #t))

(define (make-compiler . rest)
  (include-source-code #f)
  (include-variable-names #f)
  (include-procedure-names #t)
  (make:pretend (not (null? rest)))
  (make:make compiler-project "compiler.date"))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Project for building all the files in the Sparcasm subdirectory.

(define sparcasm-project (make:new-project "sparcasm.date"))
(define sparcasm-files '("asmutil" "gen-msi" "gen-prim" "sparcasm" 
			 "sparcdis" "switches"))

(make:rule sparcasm-project ".fasl" ".sch" make-compile-file)
(make:deps sparcasm-project '("sparcasm.date")
	   (objects "Sparcasm/" ".fasl" sparcasm-files))
(make:targets sparcasm-project '("sparcasm.date") (lambda args #t))

(define (make-sparcasm . rest)
  (include-source-code #f)
  (include-variable-names #f)
  (include-procedure-names #t)
  (make:pretend (not (null? rest)))
  (make:make sparcasm-project "sparcasm.date"))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Project for building all the files in the Newasm subdirectory.

(define newasm-project (make:new-project "newasm.date"))
(define newasm-files '("asmutil" "gen-msi" "gen-prim" "sparcasm" "sparcutil"
    		       "switches"
		       ; "sparcdis" 
		       ))

(make:rule newasm-project ".fasl" ".sch" make-compile-file)
(make:deps newasm-project '("newasm.date")
	   (objects "Newasm/" ".fasl" newasm-files))
(make:targets newasm-project '("newasm.date") (lambda args #t))

(define (make-newasm . rest)
  (include-source-code #f)
  (include-variable-names #f)
  (include-procedure-names #t)
  (make:pretend (not (null? rest)))
  (make:make newasm-project "newasm.date"))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Project for building the Larceny compatibility files.

(define compat-project (make:new-project "Compat"))

(make:rule compat-project ".fasl" ".sch" make-compile-file)
(make:deps compat-project '("Larceny/compat.fasl") '("Larceny/compat.sch"))
(make:targets compat-project '("compat.date") (lambda args #t))

(define (make-compat . rest)
  (include-source-code #f)
  (include-variable-names #f)
  (include-procedure-names #t)
  (make:pretend (not (null? rest)))
  (make:make compat-project "compat.date"))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Project for building the Auxiliary libraries.

(define auxlib-project (make:new-project "Auxlib"))
(define auxlib-files '("misc" "sort" "pp"))

(make:rule auxlib-project ".fasl" ".sch" make-compile-file)
(make:deps auxlib-project '("auxlib.date")
	   (objects "Auxlib/" ".fasl" auxlib-files))
(make:targets auxlib-project '("auxlib.date") (lambda args #t))

(define (make-auxlib . rest)
  (include-source-code #f)
  (include-variable-names #f)
  (include-procedure-names #t)
  (make:pretend (not (null? rest)))
  (make:make auxlib-project "auxlib.date"))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Rebuild the entire development system.

(define (make-development-environment . rest)
  (apply make-auxlib rest)
  (apply make-compiler rest)
  (apply make-sparcasm rest)
  (apply make-compat rest)
  (compile-file "Lib/makefile.sch"))


; eof

