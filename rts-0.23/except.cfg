; -*- Scheme -*-
;
; This is the file ~/except.cfg.
;
; Configuration file for Larceny -- exception codes.
;
; History
;   July 5, 1994 / lth (v0.20)
;     Added some exception codes.

(define-files 
	"Build/except.ch"
	"Build/except.ah" 
	"Build/except.sh")

; Exception codes.

(define-action assembly (lambda (x) (* x 4)))

; pairs

(define-const car    0 #f "EX_CAR" "$ex.car")
(define-const cdr    1 #f "EX_CDR" "$ex.cdr")
(define-const setcar 2 #f "EX_SETCAR" "$ex.setcar")
(define-const setcdr 3 #f "EX_SETCDR" "$ex.setcdr")

; numbers

(define-const plus 10 #f "EX_ADD" "$ex.add")
(define-const minus 11 #f "EX_SUB" "$ex.sub")
(define-const times 12 #f "EX_MUL" "$ex.mul")
(define-const divide 13 #f "EX_DIV" "$ex.div")
(define-const lt 14 #f "EX_LESSP" "$ex.lessp")
(define-const le 15 #f "EX_LESSEQP" "$ex.lesseqp")
(define-const eq 16 #f "EX_EQUALP" "$ex.equalp")
(define-const ge 17 #f "EX_GREATEREQP" "$ex.greatereqp")
(define-const gt 18 #f "EX_GREATERP" "$ex.greaterp")
(define-const quotient 19 #f "EX_QUOTIENT" "$ex.quotient")
(define-const remainder 20 #f "EX_REMAINDER" "$ex.remainder")
(define-const modulo 21 #f "EX_MODULO" "$ex.modulo")
(define-const logior 22 #f "EX_LOGIOR" "$ex.logior")
(define-const logand 23 #f "EX_LOGAND" "$ex.logand")
(define-const logxor 24 #f "EX_LOGXOR" "$ex.logxor")
(define-const lognot 25 #f "EX_LOGNOT" "$ex.lognot")
(define-const lsh 26 #f "EX_LSH" "$ex.lsh")
(define-const rsha 27 #f "EX_RSHA" "$ex.rsha")
(define-const rshl 28 #f "EX_RSHL" "$ex.rshl")
(define-const e2i 29 #f "EX_E2I" "$ex.e2i")
(define-const i2e 30 #f "EX_I2E" "$ex.i2e")
(define-const exactp 31 #f "EX_EXACTP" "$ex.exactp")
(define-const inexactp 32 #f "EX_INEXACTP" "$ex.inexactp")
(define-const round 33 #f "EX_ROUND" "$ex.round")
(define-const trunc 34 #f "EX_TRUNC" "$ex.trunc")
(define-const zerop 35 #f "EX_ZEROP" "$ex.zerop")
(define-const neg 36 #f "EX_NEG" "$ex.neg")
(define-const abs 37 #f "EX_ABS" "$ex.abs")
(define-const realpart 38 #f "EX_REALPART" "$ex.realpart")
(define-const imagpart 39 #f "EX_IMAGPART" "$ex.imagpart")

; vectors

(define-const vref 40 #f "EX_VREF" "$ex.vref")
(define-const vset 41 #f "EX_VSET" "$ex.vset")
(define-const vlen 42 #f "EX_VLEN" "$ex.vlen")

; procedures

(define-const pref 50 #f "EX_PREF" "$ex.pref")
(define-const pset 51 #f "EX_PSET" "$ex.pset")
(define-const plen 52 #f "EX_PLEN" "$ex.plen")

; strings

(define-const sref 60 #f "EX_SREF" "$ex.sref")
(define-const sset 61 #f "EX_SSET" "$ex.sset")
(define-const slen 62 #f "EX_SLEN" "$ex.slen")

; bytevectors

(define-const bvref 70 #f "EX_BVREF" "$ex.bvref")
(define-const bvset 71 #f "EX_BVSET" "$ex.bvset")
(define-const bvlen 72 #f "EX_BVLEN" "$ex.bvlen")

; bytevector-like

(define-const bvlref 80 #f "EX_BVLREF" "$ex.bvlref")
(define-const bvlset 81 #f "EX_BVLSET" "$ex.bvlset")
(define-const bvllen 82 #f "EX_BVLLEN" "$ex.bvllen")

; vector-like

(define-const vlref 90 #f "EX_VLREF" "$ex.vlref")
(define-const vlset 91 #f "EX_VLSET" "$ex.vlset")
(define-const vllen 92 #f "EX_VLLEN" "$ex.vllen")

; misc

(define-const typetag 100 #f "EX_TYPETAG" "$ex.typetag")
(define-const typetagset 101 #f "EX_TYPETAGSET" "$ex.typetagset")
(define-const apply 102 #f "EX_APPLY" "$ex.apply")
(define-const argc 103 #f "EX_ARGC" "$ex.argc")
(define-const vargc 104 #f "EX_VARGC" "$ex.vargc")
(define-const nonproc 105 #f "EX_NONPROC" "$ex.nonproc")
(define-const undef-global 106 #f "EX_UNDEF_GLOBAL" "$ex.undef-global")
(define-const dump 107 #f "EX_DUMP" "$ex.dump")
(define-const dumpfail 108 #f "EX_DUMPFAIL" "$ex.dumpfail")
(define-const timer 109 #f "EX_TIMER" "$ex.timer")
(define-const unsupp 110 #f "EX_UNSUPPORTED" "$ex.unsupported")

; added in v0.20

(define-const int2char 111 #f #f "$ex.int2char")
(define-const char2int 112 #f #f "$ex.char2int")
(define-const mkbvl 113 #f #f "$ex.mkbvl")
(define-const mkvl 114 #f #f "$ex.mkvl")

(define-const charlt 115 #f #f "$ex.char<?")
(define-const charle 116 #f #f "$ex.char<=?")
(define-const chareq 117 #f #f "$ex.char=?")
(define-const chargt 118 #f #f "$ex.char>?")
(define-const charge 119 #f #f "$ex.char>=?")

(define-const bvfill 120 #f #f "$ex.bvfill")


