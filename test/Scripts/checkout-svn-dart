SETUP_ARGS="'exit-on-error 'quiet-load"

# Setup options (based on script's name)
case "`basename "$0"`" in

    checkout-larceny-solaris-native)
	SCHEME_PGM=larceny
	SETUP_ARGS="${SETUP_ARGS} 'scheme: 'larceny  'host: 'solaris 'native"
	HEAP_DUMP_SCRIPT=src/Build/sparc-larceny-heap.sch
	DIRNAME=native
    ;;
    checkout-mzscheme-solaris-native)
	SCHEME_PGM=mzscheme
	SETUP_ARGS="${SETUP_ARGS} 'scheme: 'mzscheme 'host: 'solaris 'native"
	HEAP_DUMP_SCRIPT=src/Build/sparc-larceny-heap.sch
	DIRNAME=native
    ;;
    checkout-larceny-solaris-petit)
	SCHEME_PGM=larceny
	SETUP_ARGS="${SETUP_ARGS} 'scheme: 'larceny  'host: 'solaris"
	HEAP_DUMP_SCRIPT=src/Build/sparc-larceny-heap.sch
	DIRNAME=native
    ;;
    checkout-mzscheme-solaris-petit)
	SCHEME_PGM=mzscheme
	SETUP_ARGS="${SETUP_ARGS} 'scheme: 'mzscheme 'host: 'solaris"
	HEAP_DUMP_SCRIPT=src/Build/sparc-larceny-heap.sch
	DIRNAME=native
    ;;

    checkout-larceny-linux86-petit)
	SCHEME_PGM=larceny
	SETUP_ARGS="${SETUP_ARGS} 'scheme: 'larceny  'host: 'linux86"
	HEAP_DUMP_SCRIPT=src/Build/iasn-larceny-heap.sch
	DIRNAME=petit
    ;;
    checkout-mzscheme-linux86-petit)
	SCHEME_PGM=mzscheme
	SETUP_ARGS="${SETUP_ARGS} 'scheme: 'mzscheme 'host: 'linux86"
	HEAP_DUMP_SCRIPT=src/Build/iasn-larceny-heap.sch
	DIRNAME=petit
    ;;
    checkout-larceny-linux86-dotnet)
	SCHEME_PGM=larceny
	SETUP_ARGS="${SETUP_ARGS} 'scheme: 'larceny  'host: 'linux86 'dotnet"
	HEAP_DUMP_SCRIPT=src/Build/iasn-larceny-heap.sch
	DIRNAME=dotnet
    ;;
    checkout-mzscheme-linux86-dotnet)
	SCHEME_PGM=mzscheme
	SETUP_ARGS="${SETUP_ARGS} 'scheme: 'mzscheme 'host: 'linux86 'dotnet"
	HEAP_DUMP_SCRIPT=src/Build/iasn-larceny-heap.sch
	DIRNAME=dotnet
    ;;
    checkout-larceny-linux86-native)
	SCHEME_PGM=larceny
	SETUP_ARGS="${SETUP_ARGS} 'scheme: 'larceny  'host: 'linux86 'sassy"
	HEAP_DUMP_SCRIPT=src/Build/iasn-larceny-heap.sch
	DIRNAME=native
    ;;
    checkout-mzscheme-linux86-native)
	SCHEME_PGM=mzscheme
	SETUP_ARGS="${SETUP_ARGS} 'scheme: 'mzscheme 'host: 'linux86 'sassy"
	HEAP_DUMP_SCRIPT=src/Build/iasn-larceny-heap.sch
	DIRNAME=native
    ;;
    *)
    case "`uname`" in
	SunOS)
	echo "Setup arguments not specified; assuming Solaris native build."
	SCHEME_PGM=larceny
	SETUP_ARGS="${SETUP_ARGS} 'scheme: 'larceny  'host: 'solaris 'native"
	HEAP_DUMP_SCRIPT=src/Build/sparc-larceny-heap.sch
	DIRNAME=default
	;;
	Linux)
	echo "Setup arguments not specified; assuming linux86 native build."
	SCHEME_PGM=larceny
	SETUP_ARGS="${SETUP_ARGS} 'scheme: 'larceny  'host: 'linux86 'sassy"
	HEAP_DUMP_SCRIPT=src/Build/iasn-larceny-heap.sch
	DIRNAME=default
	;;
	Darwin)
	echo "Setup arguments not specified; assuming macosx86 native build."	
	SCHEME_PGM=larceny
	SETUP_ARGS="${SETUP_ARGS} 'scheme: 'larceny  'host: 'macosx-el 'sassy"
	HEAP_DUMP_SCRIPT=src/Build/iasn-larceny-heap.sch
	DIRNAME=default
	;;
	*)
	echo "Setup arguments not specified; unknown target architecture."
	exit 1
	;;
    esac
    ;;
esac

# Perhaps add more to this, like the hour and minute?
TODAY=`date +%Y-%m-%d` 
DIR=${HOME}/larcenytest/larceny-${DIRNAME}-${TODAY}
DARTLOG=${HOME}/larcenytest/dart-sub.xml
TEMPLOG=${HOME}/larcenytest/temp.log
TEMPSCM=${HOME}/larcenytest/temp.scm
CALCDATEDART="date +%Y-%m-%dT%H:%M:%S%z"

# Initialize the Dart log
echo '<?xml version="1.0" encoding="utf-8"?>'            >  $DARTLOG

function dartlog {
   echo $@ >> $DARTLOG
}

function quotetextfile_cdata { # doesn't work for some reason...
   dartlog '<![CDATA['
   cat $1 >> ${DARTLOG}
   dartlog ']]>'
}

function quotetextfile { # esc_html
   cat $1 | sed -e 's/\&/\&amp;/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g' >> ${DARTLOG}
}

dartlog '<DartSubmission version="2.0" createdby="' $0 '">'
dartlog '<Site>'`hostname`'</Site>'
dartlog '<BuildName>'`uname` $DIRNAME'</BuildName>'
dartlog '<Track>'Nightly'</Track>'
dartlog '<DateTimeStamp>'`$CALCDATEDART`'</DateTimeStamp>'

# args: DartStageName HumanStageName CmdString
function eval_stage {
   dartlog '<Test>'
   dartlog '<Name>'.Build.Stage$1'</Name>'
   dartlog '<Measurement name="StageName" type="text/string">'$2'</Measurement>'
   dartlog '<Measurement name="StartDateTime" type="text/string">'`$CALCDATEDART`'</Measurement>'
   SECS_BEGIN=`date +%s`
   eval $3 > ${TEMPLOG}
   SECS_FINIS=`date +%s`
   dartlog '<Measurement name="ElapsedTime" type="numeric/float">'
   dartlog `echo "(($SECS_FINIS - $SECS_BEGIN) * 0.0166666)" | bc`
   dartlog '</Measurement>'
   dartlog '<Measurement name="Execution Time" type="numeric/float">'
   dartlog `echo "(($SECS_FINIS - $SECS_BEGIN) * 0.0166666)" | bc`
   dartlog '</Measurement>'
   dartlog '<Measurement name="EndDateTime"  type="text/string">'`$CALCDATEDART`'</Measurement>'
   dartlog '<Measurement name="BuildCommand" type="text/string">' $3    '</Measurement>'
#   dartlog '<Measurement name="Log" type="text/xml">' 
#   quotetextfile ${TEMPLOG}
#   dartlog '</Measurement>'
   dartlog '</Test>'
}

SVNCHECKOUT="
mkdir -p ${DIR};
pushd ${DIR};
svn checkout -q http://uighur.ccs.neu.edu:3457/larceny-svn/trunk/larceny_src;
popd"

function host_scm_cmd {
   echo "pushd ${DIR}/larceny_src;"
   echo "echo \"(load \\\"setup.sch\\\")(setup ${SETUP_ARGS} )(build-config-files)(load-compiler)(set! *make-verbose* #f)\" \"$1\" | ${SCHEME_PGM};"
   echo "popd;"
}

eval_stage SvnCheckout "1. svn checkout" "$SVNCHECKOUT"

eval_stage BuildHeap   "2. bootstrap heap"     "`host_scm_cmd '(build-heap)'`"

eval_stage Runtime     "3. larceny runtime"    "`host_scm_cmd '(build-runtime)'`"

eval_stage Executable  "4. larceny executable" "`host_scm_cmd '(build-executable)'`"

eval_stage LarcenyFasl "5. larceny fasl files" "`host_scm_cmd '(build-larceny-files)'`"

eval_stage LarcenyHeap "6. larceny heap"       "pushd ${DIR}/larceny_src; echo | ./larceny.bin -stopcopy -- ${HEAP_DUMP_SCRIPT}; popd"

function dart_post_test {
    dartlog '<Status>'
    dartlog ${STATUS}
    dartlog '</Status>'
    dartlog '<Measurement name="Output" type="text/text">'
    quotetextfile ${TEMPLOG}
    dartlog '</Measurement>'
}

function library_test {
    dartlog '<Test>'
    dartlog '<Name>'.Test.Lib.$1.$2'</Name>'
    pushd ${DIR}/larceny_src/test/Lib > /dev/null
    cat > ${TEMPSCM} <<EOF
(compile-file "test.sch")
(compile-file "$1.sch")
(load "test.fasl")
(load "$1.fasl")
(let ((num-fails 0))
  (test-reporter (lambda (id got expected) (set! num-fails (+ 1 num-fails))))
  (run-$2-tests)
  (exit num-fails))
EOF
    SECS_BEGIN=`date +%s`
    ../../larceny -- ${TEMPSCM} > ${TEMPLOG} && STATUS="passed" || STATUS="failed"
    SECS_FINIS=`date +%s`
    dartlog '<Measurement name="Execution Time" type="numeric/float">'
    dartlog `echo "(($SECS_FINIS - $SECS_BEGIN) * 0.0166666)" | bc`
    dartlog '</Measurement>'
    dart_post_test
    dartlog '</Test>'
    popd > /dev/null
}

## Library tests
library_test bool       boolean
library_test char       char
## library_test complex
library_test pred       predicate
library_test number     number
library_test fact       fact 
library_test fib        fib
library_test ctak       ctak
## library_test env       env
library_test regression regression
library_test fixnums    fixnum
library_test wcm        wcm

function compiler_tests {
    dartlog '<Test>'
    dartlog '<Name>'.Test.Compiler.$1'</Name>'
    pushd ${DIR}/larceny_src/test/Compiler > /dev/null
    cat > ${TEMPSCM} <<EOF
(load "run-tests.sch")
(let ((num-fails 0))
  (test-reporter (lambda (id got expected) (set! num-fails (+ 1 num-fails))))
  (run-compiler-tests $1)
  (exit num-fails))
EOF
    SECS_BEGIN=`date +%s`
    ../../larceny -- ${TEMPSCM} > ${TEMPLOG} && STATUS="passed" || STATUS="failed"
    SECS_FINIS=`date +%s`
    dartlog '<Measurement name="Execution Time" type="numeric/float">'
    dartlog `echo "(($SECS_FINIS - $SECS_BEGIN) * 0.0166666)" | bc`
    dartlog '</Measurement>'
    ## Once again, can't include TEMPLOG because dart/xmlrpc sucks at big literal logs
    # dart_post_test
    dartlog '<Status>'
    dartlog ${STATUS}
    dartlog '</Status>'

    dartlog '</Test>'
    popd > /dev/null
}

## Compiler tests (sanity switches only, but we could add extra passes...)
compiler_tests sanity-switches
## compiler_tests basic-switches
## compiler_tests optimization-switches
## compiler_tests backend-switches

# Benchmarks
pushd ${DIR}/larceny_src/test/Benchmarking/CrossPlatform > /dev/null
LARCENY=`pwd`/../../../larceny ./bench -r 3 larceny normal
cat > ${TEMPSCM} <<EOF
(begin
  (load "summarize.sch")
  (let ((os (open-output-string)))
    (with-output-to-port os
      (lambda () 
        ((summarize larceny-results) "results.Larceny")))
    (let* ((str (get-output-string os))
           (is (open-input-string str))
           (decoded (decode-summary is))
           (lines (caddr decoded))
           (format-measurement (lambda (name type val)
                                 (format #t "<Measurement name=~s type=~s>~s</Measurement>" 
                                         name type val)
                                 (newline))))
      (for-each (lambda (line)
                  (let ((name (list-ref line 0))
                        (cpu  (list-ref line 1))
                        (real (list-ref line 2))
                        (gc   (list-ref line 3))
                        (numt "numeric/integer"))
                    (format #t "<Test><Name>.DynamicAnalysis.~s.~s</Name>" name name)
                    (newline)
                    (format-measurement "Execution Time" "numeric/float" 
                                        (exact->inexact (/ real 60000)))
                    (for-each format-measurement
                              (list "cpu time" "real time" "gc time")
                              (list numt       numt        numt)
                              (list cpu        real        gc))
                    (format #t "</Test>")
                    (newline)))
                lines)))
  (exit))
EOF
# The "tail +2" is to cut off the Larceny header; we should really make 
# omitting that a proper option...
../../../larceny -- ${TEMPSCM} | tail +2 >> ${DARTLOG}

cat results.Larceny >> Results/results.Larceny
rm results.Larceny
popd > /dev/null

dartlog '</DartSubmission>'

