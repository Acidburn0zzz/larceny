; Copyright 1998 Lars T Hansen.
;
; $Id$
;
; Help topics for development environment's help system
; Entry format: 
;   <entry> ::= (<tag> <descriptor> <text> ...)
;   <tag> ::= <symbol>
;   <descriptor> ::= <string>
;   <text> ::= ((<selector> ...) <string>)
;   <selector> ::= brief | full
;
; 21 january 1999

(compiling 
"  compiling          Compiling and assembling Scheme programs."
((brief full)
"(compile-file <schemefile>)
(compile-file <schemefile> <outputfile>)
  Compile the Scheme source file and produce a .fasl file.

(assemble-file <asm-file>)
(assemble-file <asm-file> <outputfile>)
  Assemble the .lap or .mal source file and produce a .fasl file.
")
((full)
"
(compile313 <schemefile> &opt <outputfile>)
  Compile the Scheme source file and produce a .lap file.

(assemble313 <lapfile> &opt <outputfile>)
  Assemble a .lap or .mal source file and produce a .lop file.

(make-fasl <lopfile> &opt <outputfile>)
  Create a fast-load file (.fasl) from the object file.
"))

(compiler-switches
"  compiler-switches  Info about a slew of compiler switches."
((brief full)
"
There are a number of compiler and assembler switches.  The
command (compiler-switches) lists all switches and their current
settings.  The switches are:

Compilation switches:
  integrate-usual-procedures Generate in-line code for primitives.
  local-optimizations        Suppress redundant instructions.
  lambda-optimizations       Suppress closures for known local procedures.
  parallel-assignment-optimization    Choose a good order of evaluation.
  benchmark-mode             Assume that self-recursive global procedures
                             will not be redefined.
  benchmark-block-mode       Assume variables will not be assigned outside
                             of the file in which they are defined.
  issue-warnings             Print warning messages.

Documentation switches:
  include-procedure-names    Compiled code will contain the procedure name.
  include-variable-names     Compiled code will contain variable names.
  include-source-code        Compiled code will contain source code.

Assembler switches:
  peephole-optimization      Perform peephole optimization.
  catch-undefined-globals    Check references to global variables.
  inline-allocation          Generate in-line code for some allocation.
  write-barrier              Generate code for generational GC.
  unsafe-code                Turn off type checking for many primitives.

The command (compiler-switches <flag>) sets groups of switches depending
on the value of the symbol <flag>.  The flags are:
  slow                  Turn off all optimizations.
  standard              Enable all semantics-preserving optimizations.
  fast-safe             Enable all optimizations but generate code to
                        do full type and range checking.
  fast-unsafe           Enable all optimizations and disable type and
                        range checking.
  factory-settings      Set switches to their default settings.
")
((full)
"
Internal (development) switches:
  listify?                   Produce listing of MAL code.  (NOTE: a variable)
  single-stepping            Insert singlestepping support code.
  fill-delay-slots           Fill SPARC branch delay slots.
")
((brief full)
"
All switches can be set to #t to enable the effect explained above, or to
#f to disable the effect.  If the switch is a variable, its value can be 
set by an assignment.  If the switch is a procedure, it can be set by
passing an argument as in (benchmark-mode #f).
"))

(disassembling
"  disassembling      Disassembling compiled code."
((brief full)
"(disassemble <procedure>)
  Disassemble the code vector of the procedure, printing the instructions
  to the current output port.

(disassemble-file <inputfile>)
(disassemble-file <inputfile> <outputfile>)
  Disassemble all code and constant vectors of the <inputfile>, which
  must be a .fasl or .lop format file, and print the disassembly listing
  on the current output port or to the given <outputfile>.
"))
  
(general
"  general            General information about file types etc."
((brief full)
"Scheme source files have extension .sch or .scm; these extensions
are treated specially by the compiler. You may compile source files
with extensions other than these, but the compiler will not replace
them with an object file extension, only append the object file
extension to the file name.

Compiled files in tokenized form have extension .lap, for \"Lisp
Assembly Program\". Again, you can use others at the risk of having
to type a lot.

MacScheme assembly language files in symbolic form have extension
.mal (for \"MacScheme Assembly Language\").

Assembled files containing machine code segments have extension
.lop (for \"Lisp Object Program\").

Fast-load files containing machine code have extension .fasl, for
\"Fast-Load\". These files contains special syntax which allow
them to be read by Larceny's reader like any other file; there is
no magic about the extension.

Heap files usually have the extension .heap.
"))

(heaps
"  heaps              Dumping heap images."
((full)
"A bootstrap heap image is created with the dump-heap procedure:

  (build-heap-image <heapname> <object-file> ...)

This creates a bootstrap heap image containing all the given objects.
However, it is not usually called directly; the following procedure
is typically more convenient:

  (make-sparc-heap)
    Create a bootstrap heap image for generational collectors,
    using the default makefile. The heap is named \"sparc.heap\".

Beware that neither of these commands cleans up .lop files compiled
for a different collector type; you should first 'make lopclean' from
the Unix shell if you are building a heap of a kind different from
the one you built last.  And if you have changed compiler switches,
you should 'make libclean' from the Unix shell to remove both LAP and
LOP files.

For details, see the file Lib/makefile.sch.
"))

; eof
