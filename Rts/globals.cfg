; Copyright 1998 Lars T Hansen.              -*- scheme -*-
;
; $Id$
;
; Configuration file for the "globals" table.

(define-files "globals.ch" "globals.ah" "globals.sh")
(define-table "c-table.c" "sparc-table.s")

(define-const heap-version "9" "HEAP_VERSION" #f #f)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Some constants
;;
;; These are used by compiled scheme, not by the compiler, so the Scheme 
;; values should not be adjusted! However, the assembly constans should
;; be adjusted, as they are used as arguments to C callouts.

(define-action assembly (lambda (x) (* x 4)))
(define-action scheme (lambda (x) x))

; garbage collection types (almost certainly obsolete)

(define-const ecoll 0 
  "EPHEMERAL_COLLECTION" "EPHEMERAL_COLLECTION" "$gc.ephemeral")
(define-const tcoll 1
  "TENURING_COLLECTION" "TENURING_COLLECTION" "$gc.tenuring")
(define-const fcoll 2
  "FULL_COLLECTION" "FULL_COLLECTION" "$gc.full")
(define-const ncoll 3    ; used internally in memstats.c
  "NO_COLLECTION" #f #f)

; Runtime statistics.

(define-const mstat-wahi     0 "STAT_WALLOCATED_HI" #f "$mstat.wallocated-hi")
(define-const mstat-walo     1 "STAT_WALLOCATED_LO" #f "$mstat.wallocated-lo")
(define-const mstat-wchi     2 "STAT_WCOLLECTED_HI" #f "$mstat.wcollected-hi")
(define-const mstat-wclo     3 "STAT_WCOLLECTED_LO" #f "$mstat.wcollected-lo")
(define-const mstat-wcphi    4 "STAT_WCOPIED_HI" #f "$mstat.wcopied-hi")
(define-const mstat-wcplo    5 "STAT_WCOPIED_LO" #f "$mstat.wcopied-lo")
(define-const mstat-np-k     6 "STAT_NP_K" #f "$mstat.np-k")
(define-const mstat-np-j     7 "STAT_NP_J" #f "$mstat.np-j")
(define-const mstat-resets   8 "STAT_DOF_RESETS" #f "$mstat.dof-resets")
(define-const mstat-repeats  9 "STAT_DOF_REPEATS" #f "$mstat.dof-repeats")
(define-const mstat-gens    10 "STAT_GENERATIONS" #f "$mstat.generations")
(define-const mstat-rems    11 "STAT_REMSETS" #f "$mstat.remsets")
(define-const mstat-ffhi    12 "STAT_FFLUSHED_HI" #f "$mstat.fflushed-hi")
(define-const mstat-fflo    13 "STAT_FFLUSHED_LO" #f "$mstat.fflushed-lo")
(define-const mstat-wfhi    14 "STAT_WFLUSHED_HI" #f "$mstat.wflushed-hi")
(define-const mstat-wflo    15 "STAT_WFLUSHED_LO" #f "$mstat.wflushed-lo")
(define-const mstat-stkc    16 "STAT_STK_CREATED" #f "$mstat.stk-created")
(define-const mstat-frhi    17 "STAT_FRESTORED_HI" #f "$mstat.frestored-hi")
(define-const mstat-frlo    18 "STAT_FRESTORED_LO" #f "$mstat.frestored-lo")
(define-const mstat-wheap   19 "STAT_WORDS_HEAP" #f "$mstat.words-heap")
(define-const mstat-wrem    20 "STAT_WORDS_REMSET" #f "$mstat.words-remset")
(define-const mstat-wrts    21 "STAT_WORDS_RTS" #f "$mstat.words-rts")
(define-const mstat-swbaa   22 "STAT_SWB_ASSIGN" #f "$mstat.swb-assign")
(define-const mstat-swbyr   23 "STAT_SWB_LHS_OK" #f "$mstat.swb-lhs-ok")
(define-const mstat-swbnp   24 "STAT_SWB_RHS_CONST" #f "$mstat.swb-rhs-const")
(define-const mstat-swbnc   25 "STAT_SWB_NOTXGEN" #f "$mstat.swb-not-xgen")
(define-const mstat-swbat   26 "STAT_SWB_TRANS" #f "$mstat.swb-trans")
(define-const mstat-swbtot  27 "STAT_SWB_TOTAL" #f "$mstat.swb-total")

(define-const mstat-rtime   28 "STAT_RTIME" #f "$mstat.rtime")
(define-const mstat-stime   29 "STAT_STIME" #f "$mstat.stime")
(define-const mstat-utime   30 "STAT_UTIME" #f "$mstat.utime")
(define-const mstat-minflt  31 "STAT_MINFAULTS" #f "$mstat.minfaults")
(define-const mstat-majflt  32 "STAT_MAJFAULTS" #f "$mstat.majfaults")
(define-const mstat-heap-max 33 "STAT_HEAP_MAX" #f "$mstat.heap-max")
(define-const mstat-wmvhi   34 "STAT_WMOVED_HI" #f "$mstat.wmoved-hi")
(define-const mstat-wmvlo   35 "STAT_WMOVED_LO" #f "$mstat.wmoved-lo")

(define-const mstat-remset-max  36 "STAT_REMSET_MAX" #f "$mstat.remset-max")
(define-const mstat-rts-max     37 "STAT_RTS_MAX" #f "$mstat.rts-max")
(define-const mstat-wastage     38 "STAT_WORDS_WASTAGE" #f "$mstat.wastage")
(define-const mstat-wastage-max 39 "STAT_WASTAGE_MAX" #f "$mstat.wastage-max")

(define-const mstat-full-gcs    40 "STAT_FULL_GCS" #f "$mstat.full-gcs")
(define-const mstat-full-gctime 41 "STAT_FULL_GCTIME" #f "$mstat.full-gctime")
(define-const mstat-full-cphi   42
  "STAT_FULL_COPIED_HI" #f "$mstat.full-copied-hi")
(define-const mstat-full-cplo   43
  "STAT_FULL_COPIED_LO" #f "$mstat.full-copied-lo")
(define-const mstat-full-mvhi   44
  "STAT_FULL_MOVED_HI" #f "$mstat.full-moved-hi")
(define-const mstat-full-mvlo   45
  "STAT_FULL_MOVED_LO" #f "$mstat.full-moved-lo")
(define-const mstat-full-mkhi   46
  "STAT_FULL_MARKED_HI" #f "$mstat.full-marked-hi")
(define-const mstat-full-mklo   47
  "STAT_FULL_MARKED_LO" #f "$mstat.full-marked-lo")
(define-const mstat-full-wmkhi  48
  "STAT_FULL_WMARKED_HI" #f "$mstat.full-words-marked-hi")
(define-const mstat-full-wmklo  49
  "STAT_FULL_WMARKED_LO" #f "$mstat.full-words-marked-lo")
(define-const mstat-full-trhi   50
  "STAT_FULL_PTRACED_HI" #f "$mstat.full-pointers-traced-hi")
(define-const mstat-full-trlo   51
  "STAT_FULL_PTRACED_LO" #f "$mstat.full-pointers-traced-lo")
(define-const mstat-wmem        52 "STAT_WORDS_MEM" #f "$mstat.words-mem")
(define-const mstat-wmem-max    53 
  "STAT_WORDS_MEM_MAX" #f "$mstat.words-mem-max")

(define-const mstat-size        54 "STAT_VSIZE" #f "$mstat.v-size")


; Runtime statistics -- per-generation.

(define-const mstat-g-gc     0 "STAT_G_GC_COUNT" #f "$mstat.g-gc-count")
(define-const mstat-g-pr     1 "STAT_G_PROM_COUNT" #f "$mstat.g-prom-count")
(define-const mstat-g-time   2 "STAT_G_GCTIME" #f "$mstat.g-gctime")
(define-const mstat-g-live   3 "STAT_G_WLIVE" #f "$mstat.g-wlive")
(define-const mstat-g-alloc  4 "STAT_G_ALLOC" #f "$mstat.g-alloc")
(define-const mstat-g-target 5 "STAT_G_TARGET" #f "$mstat.g-target")
(define-const mstat-g-ptime  6 "STAT_G_PROMTIME" #f "$mstat.g-promtime")
(define-const mstat-g-majid  7 "STAT_G_MAJOR_ID" #f "$mstat.g-major-id")
(define-const mstat-g-minid  8 "STAT_G_MINOR_ID" #f "$mstat.g-minor-id")

(define-const mstat-g-size   9 "STAT_G_SIZE" #f "$mstat.g-size")


; Runtime statistics -- per remembered set.

(define-const mstat-r-apool      0 "STAT_R_ALLOC" #f "$mstat.r-alloc")
(define-const mstat-r-upool      1 "STAT_R_USED" #f "$mstat.r-used")
(define-const mstat-r-ahash      2 "STAT_R_LIVE" #f "$mstat.r-live")
(define-const mstat-r-hrhi       3 "STAT_R_HREC_HI" #f "$mstat.r-hrec-hi")
(define-const mstat-r-hrlo       4 "STAT_R_HREC_LO" #f "$mstat.r-hrec-lo")
(define-const mstat-r-hchi       5 "STAT_R_HREM_HI" #f "$mstat.r-hrem-hi")
(define-const mstat-r-hclo       6 "STAT_R_HREM_LO" #f "$mstat.r-hrem-lo")
(define-const mstat-r-hshi       7 "STAT_R_HSCAN_HI" #f "$mstat.r-hscan-hi")
(define-const mstat-r-hslo       8 "STAT_R_HSCAN_LO" #f "$mstat.r-hscan-lo")
(define-const mstat-r-wshi       9 "STAT_R_WSCAN_HI" #f "$mstat.r-wscan-hi")
(define-const mstat-r-wslo      10 "STAT_R_WSCAN_LO" #f "$mstat.r-wscan-lo")
(define-const mstat-r-srhi      11 "STAT_R_SSBREC_HI" #f "$mstat.r-ssbrec-hi")
(define-const mstat-r-srlo      12 "STAT_R_SSBREC_LO" #f "$mstat.r-ssbrec-lo")
(define-const mstat-r-cleared   13 "STAT_R_CLEARED" #f "$mstat.r-cleared")
(define-const mstat-r-scanned   14 "STAT_R_SCANNED" #f "$mstat.r-scanned")
(define-const mstat-r-compacted 15 "STAT_R_COMPACTED" #f "$mstat.r-compacted")
(define-const mstat-r-max-size  16 "STAT_R_MAX_SIZE" #f "$mstat.r-max-size")
(define-const mstat-r-majid     17 "STAT_R_MAJOR_ID" #f "$mstat.r-major-id")
(define-const mstat-r-minid     18 "STAT_R_MINOR_ID" #f "$mstat.r-minor-id")

(define-const mstat-r-size      19 "STAT_R_SIZE" #f "$mstat.r-size")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Globals
;;
;; These are used by the compiler and must be adjusted.

(define-action scheme (lambda (x) (* x 4)))
(define-action assembly (lambda (x) (* x 4)))

(start-roots)
(define-global "G_RESULT"  "G_RESULT"  #f)
(define-global "G_ARGREG2" "G_ARGREG2" #f)
(define-global "G_ARGREG3" "G_ARGREG3" #f)
(define-global "G_REG0"    "G_REG0"    "$g.reg0")
(define-global "G_REG1"    "G_REG1"    #f)
(define-global "G_REG2"    "G_REG2"    #f)
(define-global "G_REG3"    "G_REG3"    #f)
(define-global "G_REG4"    "G_REG4"    #f)
(define-global "G_REG5"    "G_REG5"    #f)
(define-global "G_REG6"    "G_REG6"    #f)
(define-global "G_REG7"    "G_REG7"    #f)
(define-global "G_REG8"    "G_REG8"    "$r.reg8")
(define-global "G_REG9"    "G_REG9"    "$r.reg9")
(define-global "G_REG10"   "G_REG10"   "$r.reg10")
(define-global "G_REG11"   "G_REG11"   "$r.reg11")
(define-global "G_REG12"   "G_REG12"   "$r.reg12")
(define-global "G_REG13"   "G_REG13"   "$r.reg13")
(define-global "G_REG14"   "G_REG14"   "$r.reg14")
(define-global "G_REG15"   "G_REG15"   "$r.reg15")
(define-global "G_REG16"   "G_REG16"   "$r.reg16")
(define-global "G_REG17"   "G_REG17"   "$r.reg17")
(define-global "G_REG18"   "G_REG18"   "$r.reg18")
(define-global "G_REG19"   "G_REG19"   "$r.reg19")
(define-global "G_REG20"   "G_REG20"   "$r.reg20")
(define-global "G_REG21"   "G_REG21"   "$r.reg21")
(define-global "G_REG22"   "G_REG22"   "$r.reg22")
(define-global "G_REG23"   "G_REG23"   "$r.reg23")
(define-global "G_REG24"   "G_REG24"   "$r.reg24")
(define-global "G_REG25"   "G_REG25"   "$r.reg25")
(define-global "G_REG26"   "G_REG26"   "$r.reg26")
(define-global "G_REG27"   "G_REG27"   "$r.reg27")
(define-global "G_REG28"   "G_REG28"   "$r.reg28")
(define-global "G_REG29"   "G_REG29"   "$r.reg29")
(define-global "G_REG30"   "G_REG30"   "$r.reg30")
(define-global "G_REG31"   "G_REG31"   "$r.reg31")

(define-global "G_CONT"     "G_CONT"    #f)           ; continuation pointer

(define-global "G_STARTUP"  "G_STARTUP" #f)           ; startup procedure
(define-global "G_CALLOUTS" "G_CALLOUTS" #f)          ; millicode callouts

(define-global "G_SCHCALL_ARG4" "G_SCHCALL_ARG4" #f)  ; internal_scheme_call
(define-global "G_ALLOCI_TMP" "G_ALLOCI_TMP" #f)      ; _mem_alloci

(end-roots)

;; Non-root context variables.

(define-global "G_RETADDR"        "G_RETADDR" #f)
(define-global "G_TIMER"          "G_TIMER" #f)

;; Temporaries for generic arithmetic.

(define-global "G_GENERIC_NRTMP1" "G_GENERIC_NRTMP1" #f)
(define-global "G_GENERIC_NRTMP2" "G_GENERIC_NRTMP2" #f)
(define-global "G_GENERIC_NRTMP3" "G_GENERIC_NRTMP3" #f)

;; Memory management. The millicode needs the first few of these, so
;; if you don't move them you don't need to recompile the entire
;; heap.

(define-global "G_STKBOT"         "G_STKBOT" "$g.stkbot")
(define-global "G_STKP"           "G_STKP" #f)
(define-global "G_EBOT"           "G_EBOT" #f)
(define-global "G_ETOP"           "G_ETOP" #f)
(define-global "G_ELIM"           "G_ELIM" #f)
(define-global "G_TBOT"           #f #f)
(define-global "G_TTOP"           #f #f)
(define-global "G_TLIM"           #f #f)
(define-global "G_TBRK"           "G_TBRK" #f)
(define-global "G_SSBBOT"         #f #f)
(define-global "G_SSBTOP"         "G_SSBTOP" #f)
(define-global "G_SSBLIM"         "G_SSBLIM" #f)
(define-global "G_ESPACE1_BOT"    #f #f)
(define-global "G_ESPACE1_LIM"    #f #f)
(define-global "G_ESPACE2_BOT"    #f #f)
(define-global "G_ESPACE2_LIM"    #f #f)
(define-global "G_TSPACE1_BOT"    #f #f)
(define-global "G_TSPACE1_LIM"    #f #f)
(define-global "G_TSPACE2_BOT"    #f #f)
(define-global "G_TSPACE2_LIM"    #f #f)
(define-global "G_REMSET_POOLBOT" #f #f)
(define-global "G_REMSET_POOLTOP" #f #f)
(define-global "G_REMSET_POOLLIM" #f #f)
(define-global "G_REMSET_TBLBOT"  #f #f)
(define-global "G_REMSET_TBLLIM"  #f #f)
(define-global "G_STATIC_BOT"     #f #f)
(define-global "G_STATIC_TOP"     #f #f)
(define-global "G_STATIC_LIM"     #f #f)
(define-global "G_EWATERMARK"     #f #f)  ; ephemeral high-watermark
(define-global "G_THIWATERMARK"   #f #f)  ; tenured high-watermark
(define-global "G_TLOWATERMARK"   #f #f)  ; tenured low-watermark
(define-global "G_RWATERMARK"     #f #f)  ; remembered-set high-watermark
(define-global "G_GC_MUST_TENURE" #f #f)

;; process management

(define-global "G_SINGLESTEP_ENABLE" "G_SINGLESTEP_ENABLE" #f)
(define-global "G_BREAKPT_ENABLE" "G_BREAKPT_ENABLE" #f)
(define-global "G_TIMER_ENABLE"   "G_TIMER_ENABLE" #f)

;; Misc.

(define-global #f "G_SCHCALL_PROCIDX" #f)
(define-global #f "G_SCHCALL_ARGC" #f)
(define-global "G_PUSHTMP" "G_PUSHTMP" #f)
(define-global "G_CALLOUT_TMP0" "G_CALLOUT_TMP0" #f)
(define-global "G_CALLOUT_TMP1" "G_CALLOUT_TMP1" #f)
(define-global "G_CALLOUT_TMP2" "G_CALLOUT_TMP2" #f)
(define-global "G_CACHE_FLUSH" "G_CACHE_FLUSH" #f)

;; Write barrier

(define-global "G_SSBTOPV" "G_SSBTOPV" #f)    ; ssb top vector
(define-global "G_SSBLIMV" "G_SSBLIMV" #f)    ; ssb limit vector
(define-global "G_GENV"    "G_GENV"    #f)    ; page descriptor table
(define-global "G_PGBASE"  "G_PGBASE"  #f)    ; page base
(define-global "G_WBPROF"  "G_WBPROF"  #f)    ; write barrier profiling

;; Misc, again -- time to clean up!

(define-global "G_STKUFLOW" "G_STKUFLOW" #f)  ; stack underflow counting

;; Non-predictive collector support.

; np young gen#
(define-global "G_NP_YOUNG_GEN" "G_NP_YOUNG_GEN" #f)  

; index in sbbtop/ssblim vectors of pointers for np extra remset
(define-global "G_NP_YOUNG_GEN_SSBIDX" "G_NP_YOUNG_GEN_SSBIDX" #f)

; interrupt handling
(define-global "G_SIGNAL" "G_SIGNAL" #f)      ; some asynch. signal received
(define-global "G_SIGINT" "G_SIGINT" #f)      ; SIGINT received

(define-global "G_FPE_CODE" "G_FPE_CODE" #f)    ; SIGFPE data
(define-global "G_IDIV_CODE" "G_IDIV_CODE" #f)  ; integer division error code

; Scheme-to-scheme call non-roots
(define-global "G_SCHCALL_SAVERES" "G_SCHCALL_SAVERES" #f) ; save RESULT flag
(define-global "G_SCHCALL_RETADDR" "G_SCHCALL_RETADDR" #f) ; return address

; More timer support
(define-global "G_TIMER2" "G_TIMER2" #f)  ; secondary timer variable

; more misc!!

; A temporary value.
(define-global "G_GENERIC_NRTMP4" "G_GENERIC_NRTMP4" #f)

; A pointer to the garbage collector (type gc_t*).
(define-global "G_GC" "G_GC" #f)

; The number of garbage collections since startup (a fixnum).
(define-global "G_GC_CNT" "G_GC_CNT" "$g.gccnt")

; Write barrier bit for C back-end: if 0, then barrier is off, otherwise
; barrier is on.
(define-global "G_BARRIER_ENABLE" #f #f)

; Generation number of dynamic generation, for DOF write barrier.
(define-global "G_DYNAMIC_GEN" "G_DYNAMIC_GEN" #f)


;; Plenty of room to grow in so that we don't have to recompile heap every
;; time we add some globals which only C knows about.

(align 256)  ; that's words, not bytes.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Millicode procedures.

;; Memory management 
;;
;; Note that $m.stkuflow is here only to support the slow stack underflow
;; logic; it is not normally needed in the table.

(define-mproc "M_ALLOC" "M_ALLOC" "$m.alloc" "mem_alloc")
(define-mproc "M_ALLOCI" "M_ALLOCI" "$m.alloci" "mem_alloci")
(define-mproc "M_MORECORE" "M_MORECORE" "$m.morecore" "mem_morecore")
(define-mproc "M_ADDTRANS" "M_ADDTRANS" "$m.addtrans" "mem_addtrans")
(define-mproc "M_STKOFLOW" "M_STKOFLOW" "$m.stkoflow" "mem_stkoflow")
(define-mproc #f "M_INTERNAL_STKOFLOW" #f "mem_internal_stkoflow")
(define-mproc #f #f "$m.stkuflow" "mem_stkuflow")
(define-mproc "M_CREG" "M_CREG" "$m.creg" "mem_capture_continuation")
(define-mproc 
  "M_CREG_SET" "M_CREG_SET" "$m.creg-set!" "mem_restore_continuation")

;; Generic arithmetic

(define-mproc "M_ADD" "M_ADD" "$m.add" "m_generic_add")
(define-mproc "M_SUB" "M_SUB" "$m.subtract" "m_generic_sub")
(define-mproc "M_MUL" "M_MUL" "$m.multiply" "m_generic_mul")
(define-mproc "M_QUOT" "M_QUOT" "$m.quotient" "m_generic_quo")
(define-mproc "M_REM" "M_REM" "$m.remainder" "m_generic_rem")
(define-mproc "M_DIV" "M_DIV" "$m.divide" "m_generic_div")
(define-mproc "M_MOD" "M_MOD" "$m.modulo" "m_generic_mod")
(define-mproc "M_NEG" "M_NEG" "$m.negate" "m_generic_neg")
(define-mproc "M_NUMEQ" "M_NUMEQ" "$m.numeq" "m_generic_equalp")
(define-mproc "M_NUMLT" "M_NUMLT" "$m.numlt" "m_generic_lessp")
(define-mproc "M_NUMLE" "M_NUMLE" "$m.numle" "m_generic_less_or_equalp")
(define-mproc "M_NUMGT" "M_NUMGT" "$m.numgt" "m_generic_greaterp")
(define-mproc "M_NUMGE" "M_NUMGE" "$m.numge" "m_generic_greater_or_equalp")
(define-mproc "M_ZEROP" "M_ZEROP" "$m.zerop" "m_generic_zerop")
(define-mproc "M_COMPLEXP" "M_COMPLEXP" "$m.complexp" "m_generic_complexp")
(define-mproc "M_REALP" "M_REALP" "$m.realp" "m_generic_realp")
(define-mproc "M_RATIONALP" "M_RATIONALP" "$m.rationalp" "m_generic_rationalp")
(define-mproc "M_INTEGERP" "M_INTEGERP" "$m.integerp" "m_generic_integerp")
(define-mproc "M_EXACTP" "M_EXACTP" "$m.exactp" "m_generic_exactp")
(define-mproc "M_INEXACTP" "M_INEXACTP" "$m.inexactp" "m_generic_inexactp")
(define-mproc 
  "M_EXACT2INEXACT" "M_EXACT2INEXACT" "$m.exact->inexact" 
  "m_generic_exact2inexact")
(define-mproc
  "M_INEXACT2EXACT" "M_INEXACT2EXACT" "$m.inexact->exact" 
  "m_generic_inexact2exact")
(define-mproc 
  "M_MAKE_RECTANGULAR" "M_MAKE_RECTANGULAR" "$m.make-rectangular"
  "m_generic_make_rectangular")
(define-mproc "M_REAL_PART" "M_REAL_PART" "$m.real-part" "m_generic_real_part")
(define-mproc "M_IMAG_PART" "M_IMAG_PART" "$m.imag-part" "m_generic_imag_part")
(define-mproc "M_SQRT" "M_SQRT" "$m.sqrt" "m_generic_sqrt")
(define-mproc "M_ROUND" "M_ROUND" "$m.round" "m_generic_round")
(define-mproc "M_TRUNCATE" "M_TRUNCATE" "$m.truncate" "m_generic_truncate")

;; Misc. internal

(define-mproc "M_APPLY" "M_APPLY" "$m.apply" "m_apply")
(define-mproc "M_VARARGS" "M_VARARGS" "$m.varargs" "m_varargs")
(define-mproc "M_TYPETAG" "M_TYPETAG" "$m.typetag" "m_typetag")
(define-mproc "M_TYPETAGSET" "M_TYPETAGSET" "$m.typetag-set" "m_typetag_set")
(define-mproc "M_BREAK" "M_BREAK" "$m.break" "m_break")
(define-mproc "M_EQV" "M_EQV" "$m.eqv" "m_eqv")
(define-mproc 
  "M_PARTIAL_LIST2VECTOR" "M_PARTIAL_LIST2VECTOR" "$m.partial-list->vector" 
  "m_partial_list2vector")
(define-mproc
  "M_TIMER_EXCEPTION" "M_TIMER_EXCEPTION" "$m.timer-exception" 
  "m_timer_exception")
(define-mproc "M_EXCEPTION" "M_EXCEPTION" "$m.exception" "m_exception")
(define-mproc "M_SINGLESTEP" "M_SINGLESTEP" "$m.singlestep" "m_singlestep")

;; I/O and system interface

(define-mproc "M_SYSCALL" "M_SYSCALL" "$m.syscall" "m_syscall")
(define-mproc "M_BVLCMP" "M_BVLCMP" "$m.bvlcmp" "m_bvlcmp")
(define-mproc "M_EINTR" "M_EINTR" "$m.enable-interrupts" "m_enable_interrupts")
(define-mproc 
  "M_DINTR" "M_DINTR" "$m.disable-interrupts" "m_disable_interrupts")

;; New memory manager entry point to support Boehm collector better.
;; Need to move up with others.

(define-mproc "M_ALLOC_BV" "M_ALLOC_BV" "$m.alloc-bv" "mem_alloc_bv")

;; More specialized error handling to reduce compiled code size.

(define-mproc "M_GLOBAL_EX" "M_GLOBAL_EX" "$m.global-ex" "m_global_exception")
(define-mproc "M_INVOKE_EX" "M_INVOKE_EX" "$m.invoke-ex" "m_invoke_exception")
(define-mproc "M_GLOBAL_INVOKE_EX" "M_GLOBAL_INVOKE_EX" "$m.global-invoke-ex"
  "m_global_invoke_exception")
(define-mproc "M_ARGC_EX" "M_ARGC_EX" "$m.argc-ex" "m_argc_exception")

;; More misc internal

(define-mproc "M_DEBUGVSM" "M_DEBUGVSM" "$m.debugvsm" "m_debugvsm")

; eof

