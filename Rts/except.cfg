; Copyright 1998 Lars T Hansen.
;
; $Id$
;
; Exception codes.

(define-files 
	"Build/except.ch"
	"Build/except.ah" 
	"Build/except.sh")

; Exception codes.

(define-action assembly (lambda (x) (* x 4)))   ; Preformatted fixnums

; pairs

(define-const car    0 "EX_CAR" "EX_CAR" "$ex.car")
(define-const cdr    1 "EX_CDR" "EX_CDR" "$ex.cdr")
(define-const setcar 2 "EX_SETCAR" "EX_SETCAR" "$ex.setcar")
(define-const setcdr 3 "EX_SETCDR" "EX_SETCDR" "$ex.setcdr")

; numbers

(define-const plus 10 "EX_ADD" "EX_ADD" "$ex.add")
(define-const minus 11 "EX_SUB" "EX_SUB" "$ex.sub")
(define-const times 12 "EX_MUL" "EX_MUL" "$ex.mul")
(define-const divide 13 "EX_DIV" "EX_DIV" "$ex.div")
(define-const lt 14 "EX_LESSP" "EX_LESSP" "$ex.lessp")
(define-const le 15 "EX_LESSEQP" "EX_LESSEQP" "$ex.lesseqp")
(define-const eq 16 "EX_EQUALP" "EX_EQUALP" "$ex.equalp")
(define-const ge 17 "EX_GREATEREQP" "EX_GREATEREQP" "$ex.greatereqp")
(define-const gt 18 "EX_GREATERP" "EX_GREATERP" "$ex.greaterp")
(define-const quotient 19 "EX_QUOTIENT" "EX_QUOTIENT" "$ex.quotient")
(define-const remainder 20 "EX_REMAINDER" "EX_REMAINDER" "$ex.remainder")
(define-const modulo 21 "EX_MODULO" "EX_MODULO" "$ex.modulo")
(define-const logior 22 "EX_LOGIOR" "EX_LOGIOR" "$ex.logior")
(define-const logand 23 "EX_LOGAND" "EX_LOGAND" "$ex.logand")
(define-const logxor 24 "EX_LOGXOR" "EX_LOGXOR" "$ex.logxor")
(define-const lognot 25 "EX_LOGNOT" "EX_LOGNOT" "$ex.lognot")
(define-const lsh 26 "EX_LSH" "EX_LSH" "$ex.lsh")
(define-const rsha 27 "EX_RSHA" "EX_RSHA" "$ex.rsha")
(define-const rshl 28 "EX_RSHL" "EX_RSHL" "$ex.rshl")
(define-const e2i 29 "EX_E2I" "EX_E2I" "$ex.e2i")
(define-const i2e 30 "EX_I2E" "EX_I2E" "$ex.i2e")
(define-const exactp 31 "EX_EXACTP" "EX_EXACTP" "$ex.exactp")
(define-const inexactp 32 "EX_INEXACTP" "EX_INEXACTP" "$ex.inexactp")
(define-const round 33 "EX_ROUND" "EX_ROUND" "$ex.round")
(define-const trunc 34 "EX_TRUNC" "EX_TRUNC" "$ex.trunc")
(define-const zerop 35 "EX_ZEROP" "EX_ZEROP" "$ex.zerop")
(define-const neg 36 "EX_NEG" "EX_NEG" "$ex.neg")
(define-const abs 37 "EX_ABS" "EX_ABS" "$ex.abs")
(define-const realpart 38 "EX_REALPART" "EX_REALPART" "$ex.realpart")
(define-const imagpart 39 "EX_IMAGPART" "EX_IMAGPART" "$ex.imagpart")

; vectors

(define-const vref 40 "EX_VECTOR_REF" "EX_VREF" "$ex.vref")
(define-const vset 41 "EX_VECTOR_SET" "EX_VSET" "$ex.vset")
(define-const vlen 42 "EX_VECTOR_LENGTH" "EX_VLEN" "$ex.vlen")

; procedures

(define-const pref 50 "EX_PROCEDURE_REF" "EX_PREF" "$ex.pref")
(define-const pset 51 "EX_PROCEDURE_SET" "EX_PSET" "$ex.pset")
(define-const plen 52 "EX_PROCEDURE_LENGTH" "EX_PLEN" "$ex.plen")

; strings

(define-const sref 60 "EX_STRING_REF" "EX_SREF" "$ex.sref")
(define-const sset 61 "EX_STRING_SET" "EX_SSET" "$ex.sset")
(define-const slen 62 "EX_STRING_LENGTH" "EX_SLEN" "$ex.slen")

; bytevectors

(define-const bvref 70 "EX_BYTEVECTOR_REF" "EX_BVREF" "$ex.bvref")
(define-const bvset 71 "EX_BYTEVECTOR_SET" "EX_BVSET" "$ex.bvset")
(define-const bvlen 72 "EX_BYTEVECTOR_LENGTH" "EX_BVLEN" "$ex.bvlen")

; bytevector-like

(define-const bvlref 80 "EX_BVLREF" "EX_BVLREF" "$ex.bvlref")
(define-const bvlset 81 "EX_BVLSET" "EX_BVLSET" "$ex.bvlset")
(define-const bvllen 82 "EX_BVLLEN" "EX_BVLLEN" "$ex.bvllen")

; vector-like

(define-const vlref 90 "EX_VLREF" "EX_VLREF" "$ex.vlref")
(define-const vlset 91 "EX_VLSET" "EX_VLSET" "$ex.vlset")
(define-const vllen 92 "EX_VLLEN" "EX_VLLEN" "$ex.vllen")

; misc

(define-const typetag 100 "EX_TYPETAG" "EX_TYPETAG" "$ex.typetag")
(define-const typetagset 101 "EX_TYPETAGSET" "EX_TYPETAGSET" "$ex.typetagset")
(define-const apply 102 "EX_APPLY" "EX_APPLY" "$ex.apply")
(define-const argc 103 "EX_ARGSEQ" "EX_ARGC" "$ex.argc")
(define-const vargc 104 "EX_ARGSGE" "EX_VARGC" "$ex.vargc")
(define-const nonproc 105 "EX_NONPROC" "EX_NONPROC" "$ex.nonproc")
(define-const undef-global 106
  "EX_UNDEF_GLOBAL" "EX_UNDEF_GLOBAL" "$ex.undef-global")
(define-const dump 107 "EX_DUMP" "EX_DUMP" "$ex.dump")
(define-const dumpfail 108 "EX_DUMPFAIL" "EX_DUMPFAIL" "$ex.dumpfail")
(define-const timer 109 "EX_TIMER" "EX_TIMER" "$ex.timer")
(define-const unsupp 110 "EX_UNSUPPORTED" "EX_UNSUPPORTED" "$ex.unsupported")

(define-const int2char 111 "EX_INT2CHAR" #f "$ex.int2char")
(define-const char2int 112 "EX_CHAR2INT" #f "$ex.char2int")
; This is really make-bytevector, which is the only bytevector constructor.
(define-const mkbvl 113 "EX_MKBVL" #f "$ex.mkbvl")
; This is really make-vector, which is the only vector constructor.
(define-const mkvl 114 "EX_MKVL" #f "$ex.mkvl")

(define-const charlt 115 "EX_CHARLT" #f "$ex.char<?")
(define-const charle 116 "EX_CHARLE" #f "$ex.char<=?")
(define-const chareq 117 "EX_CHAREQ" #f "$ex.char=?")
(define-const chargt 118 "EX_CHARGT" #f "$ex.char>?")
(define-const charge 119 "EX_CHARGE" #f "$ex.char>=?")

(define-const bvfill 120 "EX_BVFILL" #f "$ex.bvfill")

(define-const enableintr 121 "EX_EINTR" "EX_EINTR" "$ex.enable-interrupts")

(define-const sigint 122 "EX_KBDINTR" "EX_KBDINTR" "$ex.keyboard-interrupt")
(define-const sigfpe 123 "EX_FPE" "EX_FPE" "$ex.arithmetic-exception")
(define-const global-invoke 124
              "EX_GLOBAL_INVOKE" "EX_GLOBAL_INVOKE" "$ex.global-invoke")

; Fixnum operations

(define-const fx+  140 "EX_FXADD" "EX_FXADD" "$ex.fx+")
(define-const fx-  141 "EX_FXSUB" "EX_FXSUB" "$ex.fx-")
(define-const fx-- 142 "EX_FXNEG" "EX_FXNEG" "$ex.fx--")
(define-const fx=  143 "EX_FXEQ"  "EX_FXEQ"  "$ex.fx=")
(define-const fx<  144 "EX_FXLT"  "EX_FXLT"  "$ex.fx<")
(define-const fx<= 145 "EX_FXLE"  "EX_FXLE"  "$ex.fx<=")
(define-const fx>  146 "EX_FXGT"  "EX_FXGT"  "$ex.fx>")
(define-const fx>= 147 "EX_FXGE"  "EX_FXGE"  "$ex.fx>=")
(define-const fxpositive? 148 
              "EX_FXPOSITIVE" "EX_FXPOSITIVE" "$ex.fxpositive?")
(define-const fxnegative? 149
              "EX_FXNEGATIVE" "EX_FXNEGATIVE" "$ex.fxnegative?")
(define-const fxzero? 150
              "EX_FXZERO" "EX_FXZERO" "$ex.fxzero?")
(define-const fxmul 151 "EX_FXMUL" "EX_FXMUL" "$ex.fx*")

; eof

