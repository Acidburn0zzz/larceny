#!/bin/sh
#
# Copyright 1998 Lars T Hansen
#
# $Id$
#
# Development system shell script.

######################################################################
#
# Configuration section

# Valid values for $BUILD_HOST: 
#   chez         Executable 'scheme' in the path (Chez Scheme v5)
#   larceny      Executable 'larceny' in path (Larceny)
#   larceny.bin  Executable 'larceny.bin' and heap 'sparc.heap' in
#                directory defined by LARCENY_PATH.
# You can add others by editing the code in this script (each host must
# have custom code).  
#
# The ${BUILD_HOST:-<host>} construction allows recursive uses of build,
# as when called from Rts/Makefile, to pick up the right host system.

BUILD_HOST=${BUILD_HOST:-larceny}
export BUILD_HOST

# Path of build directory.
# Do _NOT_ remove the LARCENY_DEF tag.  It is used by `make setup' to
# initialize the definition of the working directory.

LARCENY=/proj/will/lth/larceny/src #@LARCENY_DEF@

#
######################################################################

# Variables

TMPFILE=/tmp/larceny.build.`whoami`.$$
UTIL=${LARCENY}/Util
ACTION=build
FILE=
TARGET="sparc"
ARGS=""
INTERP="#f"
VERBOSE="#f"
ENDIAN=big

# Functions

usage() {
  echo "Usage: build [ options ] [ -a host system argument ... ]"
  echo ""
  echo "Options are:"
  echo "  -build             run development environment"
  echo "  -config FILE       run config on FILE"
  echo "  -expand FILE       run expand on FILE"
  echo ""
  echo "  -big               big endian (implies -petit)"
  echo "  -chez, -c          use Chez Scheme"
  echo "  -interpreted, -i   use interpreter (do not load compiled files)"
  echo "  -larceny, -l       use larceny"
  echo "  -larceny.bin, -lb  use larceny.bin in development directory"
  echo "  -little            little endian (implies -petit)"
  echo "  -sparc             SPARC back-end"
  echo "  -petit             ANSI/ISO C back-end"
  echo "  -verbose, -v       be verbose"
  echo ""
  echo "Default options are -build -larceny -sparc"
  echo ""
  echo "See also http://www.ccs.neu.edu/home/lth/larceny/developing.html"
  exit $1
}

run_development_environment() {
  if [ $TARGET = "standard-C" ]; then
    if [ $ENDIAN = "big" ]; then
      TARGET="C-be"
    else
      TARGET="C-el"
    fi
  fi

  case $BUILD_HOST in
    chez)
      L_HOSTDIR="Chez"
      L_HOSTNAME="Chez Scheme"
      ;;
    larceny | larceny.bin)
      L_HOSTDIR=Larceny
      L_HOSTNAME="Larceny"
      ;;
    *)
      echo "Error: bad host $BUILD_HOST in run_development_environment."
      exit 1
      ;;
  esac

cat > $TMPFILE <<END
  (load "${UTIL}/nbuild-param-${TARGET}.sch")
  (define nbuild-parameter 
    (make-nbuild-parameter 
      "${LARCENY}/" $INTERP $VERBOSE "$L_HOSTDIR" "$L_HOSTNAME"))

  (display "Twobit/Larceny development environment running under ")
  (display (nbuild-parameter 'host-system))
  (display ".")
  (newline)
  (newline)
  (display "Loading ")
  (display (nbuild-parameter 'host-system))
  (display " compatibility package.")
  (newline)
  (load (string-append (nbuild-parameter 'compatibility) "compat.sch"))
  (compat:initialize)
  (load (string-append (nbuild-parameter 'util) "nbuild.sch"))
END

  # Make the scheme header file; it may have changed.

  ( cd Rts; make Build/schdefs.h ; exit $? ) || exit $?

  # Do it!
  run_scheme
}

expand_file() {
  TARGET=`dirname $FILE`/`basename $FILE .mac`.c
  echo "(define host '${BUILD_HOST})" >> $TMPFILE
  echo "(load \"${UTIL}/expand.sch\")" >> $TMPFILE
  echo "(expand-file \"${FILE}\" \"${TARGET}\")" >> $TMPFILE
  echo "(exit)" >> $TMPFILE
  run_scheme
}

config_file() {
  echo "(define host '${BUILD_HOST})" >> $TMPFILE
  echo "(load \"${UTIL}/config.sch\")" >> $TMPFILE
  echo "(config \"${FILE}\")" >> $TMPFILE
  echo "(exit)" >> $TMPFILE
  run_scheme
}

run_scheme() {
  case $BUILD_HOST in
    chez)    run_chez ;;
    larceny) run_larceny ;;
    larceny.bin) run_larceny_bin ;;
    *)       echo "Unknown host tag $BUILD_HOST"; exit 1 ;;
  esac
}

run_chez() {
  scheme $TMPFILE $ARGS | tail +4
}

run_larceny_bin() {
  EXEC=${LARCENY}/larceny.bin
  HEAP=${LARCENY}/sparc.heap
  $EXEC $HEAP -args $TMPFILE $ARGS | tail +1
}

run_larceny() {
  larceny $TMPFILE $ARGS | tail +1
}

# Main

while [ "$1" != "" ]; do 
  case $1 in
    -build)
      ACTION=build; shift
      ;;
    -config)
      ACTION=config; shift
      if [ "$1" != "" ]; then FILE=$1; shift ; else usage 1; fi
      ;;
    -expand)  
      ACTION=expand; shift
      if [ "$1" != "" ]; then FILE=$1; shift ; else usage 1; fi
      ;;
    -a | -arguments)
      shift
      ARGS=$*
      break
      ;;
    -big)
      TARGET="standard-C"
      ENDIAN=big
      shift
      ;;
    -chez | -c)
      BUILD_HOST=chez; shift 
      ;;
    -help | -h)
      usage 0
      ;;
    -interpreted | -i)
      INTERP="#t"
      shift
      ;;
    -little)
      TARGET="standard-C"
      ENDIAN=little
      shift
      ;;
    -larceny | -l)
      BUILD_HOST=larceny; shift
      ;;
    -larceny.bin | -lb) 
      BUILD_HOST=larceny.bin; shift 
      ;;
    -sparc)
      TARGET="sparc"
      shift
      ;;
    -petit)
      TARGET="standard-C"
      shift
      ;;
    -verbose | -v)
      VERBOSE="#t"
      shift
      ;;
    *)
      echo "Unrecognized option: $1"
      usage 1
      ;;
  esac
done

rm -f $TMPFILE
case $ACTION in
  build)  run_development_environment ;;
  expand) expand_file ;;
  config) config_file ;;
esac

rm -f $TMPFILE
exit 0

