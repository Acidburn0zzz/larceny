#!/bin/sh
#
# Copyright 1998 Lars T Hansen
#
# $Id$
#
# Development system shell script -- Unix.

######################################################################
#
# Configuration section

# Valid values for $BUILD_HOST: 
#   bdwlarceny.bin  Executable 'bdwlarceny.bin' and heap 'sparc.heap'
#                     in the development directory (LARCENY_PATH)
#   chez            Executable 'scheme' in the path (Chez Scheme v5 or later)
#   larceny         Executable 'larceny' in the path (Larceny)
#   petit.bin       Executable 'petit.bin' and heap 'petit.heap' in
#                     the development directory (LARCENY_PATH)
#   larceny.bin     Executable 'larceny.bin' and heap 'sparc.heap' in
#                     the development directory (LARCENY_PATH)
#   gambit          Executable 'gsc' in the path (Gambit-C v3.0)
#
# You can add others by editing the code in this script (each host must
# have custom code).  
#

# Initialized values Don't remove tags -- used by `make setup'.

LARCENY=/proj/will/lth/larceny/src #@LARCENY_DEF@
DEFAULT_BUILD_HOST=larceny #@BUILD_HOST_DEF@
export LARCENY
export DEFAULT_BUILD_HOST

# Make it available to subprocesses that call build (eg to run config).

BUILD_HOST=${BUILD_HOST:-${DEFAULT_BUILD_HOST}}
export BUILD_HOST


#
######################################################################

# Variables

TMPFILE=/tmp/larceny.build.`whoami`.$$
UTIL=${LARCENY}/Util
ACTION=build
FILE=
TARGET="sparc"
OS="unix"
ARGS=""
INTERP="#f"
VERBOSE="#f"
ENDIAN=big
LARCENY_EXTRA=""

# Functions

usage() {
  echo "Usage: build [ options ] [ -a host system argument ... ]"
  echo ""
  echo "Options are:"
  echo "  -build             run development environment"
  echo "  -config FILE       run config on FILE"
  echo "  -expand FILE       run expand on FILE"
  echo ""
  echo "  -verbose, -v       be verbose"
  echo "  -interpreted, -i   use interpreter (do not load compiled files)"
  echo ""
  echo "  -bdw               use bdwlarceny.bin host (in development directory)"
  echo "  -chez, -c          use Chez Scheme host"
  echo "  -gambit            use Gambit-C host"
  echo "  -larceny, -l       use Larceny host"
  echo "  -larceny.bin, -lb  use larceny.bin host (in development directory)"
  echo "  -petit.bin, -pb    use petit.bin host (in development directory)"
  echo ""
  echo "  -big               big endian (implies -petit)"
  echo "  -little            little endian (implies -petit)"
  echo "  -sparc             generate SPARC code (implies -unix)"
  echo "  -petit             generate ANSI/ISO C code"
  echo "  -generic           generic OS"
  echo "  -unix              Unix"
  ehco "  -macos             MacOS"
  echo ""
  echo "Default options are -build -larceny -sparc -unix"
  echo ""
  echo "WARNING: cross-compilation to a different endianness does not yet"
  echo "         work well; UTSL."
  echo ""
  echo "See also http://www.ccs.neu.edu/home/will/Larceny/developing.html"
  exit $1
}

run_development_environment() {
cat > $TMPFILE <<END
  (load "${UTIL}/sysdep-unix.sch")
  (load "${UTIL}/nbuild-param-${TARGET}.sch")
  (define nbuild-parameter 
    (make-nbuild-parameter 
      "${LARCENY}/" $INTERP $VERBOSE "$L_HOSTDIR" "$L_HOSTNAME"))

  (display "Twobit/Larceny development environment running under ")
  (display (nbuild-parameter 'host-system))
  (display ".")
  (newline)
  (newline)
  (display "Loading ")
  (display (nbuild-parameter 'host-system))
  (display " compatibility package.")
  (newline)
  (load (string-append (nbuild-parameter 'compatibility) "compat.sch"))
  (compat:initialize)
  (load (string-append (nbuild-parameter 'util) "nbuild.sch"))
END

  # Make the scheme header file; it may have changed.

  ( cd Rts; make Build/schdefs.h ; exit $? ) || exit $?

  # Do it!
  run_scheme
}

expand_file() {
cat > $TMPFILE <<END
  (load "${UTIL}/sysdep-unix.sch")
  (load "${UTIL}/nbuild-param-${TARGET}.sch")
  (define nbuild-parameter 
    (make-nbuild-parameter 
      "${LARCENY}/" $INTERP $VERBOSE "$L_HOSTDIR" "$L_HOSTNAME"))
  (display "Loading ")
  (display (nbuild-parameter 'host-system))
  (display " compatibility package.")
  (newline)
  (load (string-append (nbuild-parameter 'compatibility) "compat.sch"))
  (compat:initialize)
  (load (string-append (nbuild-parameter 'util) "expander.sch"))
  (expand-file "${FILE}" "`dirname $FILE`/`basename $FILE .mac`.c")
  (exit)
END
  run_scheme
}

config_file() {
cat > $TMPFILE <<END
  (load "${UTIL}/sysdep-unix.sch")
  (load "${UTIL}/nbuild-param-${TARGET}.sch")
  (define nbuild-parameter 
    (make-nbuild-parameter 
      "${LARCENY}/" $INTERP $VERBOSE "$L_HOSTDIR" "$L_HOSTNAME"))
  (display "Loading ")
  (display (nbuild-parameter 'host-system))
  (display " compatibility package.")
  (newline)
  (load (string-append (nbuild-parameter 'compatibility) "compat.sch"))
  (compat:initialize)
  (load (string-append (nbuild-parameter 'util) "config.sch"))
  (define config-path "Build/")
  (config "${FILE}")
  (exit)
END
  run_scheme
}

run_scheme() {
  case $BUILD_HOST in
    chez)    run_chez ;;
    larceny) run_larceny ;;
    larceny.bin) run_larceny_bin ;;
    petit.bin)   run_petit_bin ;;
    gambit)      run_gambit ;;
    bdwlarceny.bin) run_bdwlarceny_bin ;;
    *)       echo "Unknown host tag $BUILD_HOST"; exit 1 ;;
  esac
}

run_chez() {
  scheme $TMPFILE $ARGS
}

run_larceny_bin() {
  EXEC=${LARCENY}/larceny.bin
  HEAP=${BUILD_HEAP:-${LARCENY}/sparc.heap}
  $EXEC $HEAP $LARCENY_EXTRA -args $TMPFILE $ARGS
}

run_petit_bin() {
  EXEC=${LARCENY}/petit.bin
  HEAP=${LARCENY}/petit.heap
  $EXEC $HEAP $LARCENY_EXTRA -args $TMPFILE $ARGS
}

run_bdwlarceny_bin() {
  EXEC=${LARCENY}/bdwlarceny.bin
  HEAP=${LARCENY}/sparc.heap
  $EXEC $HEAP $LARCENY_EXTRA -args $TMPFILE $ARGS
}

run_larceny() {
  larceny $LARCENY_EXTRA $TMPFILE $ARGS
}

run_gambit() {
  gsc -:s,t,c -i -e "(load \"$TMPFILE\")"
}

######################################################################
#
# Main program

# Parse command line arguments.

while [ "$1" != "" ]; do 
  case $1 in
    -bdw)
      BUILD_HOST=bdwlarceny.bin; shift 
      ;;
    -build)
      ACTION=build; shift
      ;;
    -config)
      ACTION=config; shift
      if [ "$1" != "" ]; then FILE=$1; shift ; else usage 1; fi
      ;;
    -expand)  
      ACTION=expand; shift
      if [ "$1" != "" ]; then FILE=$1; shift ; else usage 1; fi
      ;;
    -a | -arguments)
      shift
      ARGS=$*
      break
      ;;
    -big)
      TARGET="standard-C"
      ENDIAN=big
      shift
      ;;
    -chez | -c)
      BUILD_HOST=chez; shift 
      ;;
    -gambit)
      BUILD_HOST=gambit; shift
      ;;
    -help | -h)
      usage 0
      ;;
    -interpreted | -i)
      INTERP="#t"
      shift
      ;;
    -little)
      TARGET="standard-C"
      ENDIAN=little
      shift
      ;;
    -larceny | -l)
      BUILD_HOST=larceny; shift
      ;;
    -larceny.bin | -lb) 
      BUILD_HOST=larceny.bin; shift 
      ;;
    -petit.bin | -pb) 
      BUILD_HOST=petit.bin; shift 
      ;;
    @stopcopy)
      LARCENY_EXTRA="$LARCENY_EXTRA -stopcopy"; shift
      ;;
    -sparc)
      TARGET="sparc"
      OS="unix"
      shift
      ;;
    -petit)
      TARGET="standard-C"
      shift
      ;;
    -generic)
      OS="generic"
      shift
      ;;
    -unix)
      OS="unix"
      shift
      ;;
    -macos)
      OS="macos"
      shift
      ;;
    -verbose | -v)
      VERBOSE="#t"
      shift
      ;;
    *)
      echo "Unrecognized option: $1"
      usage 1
      ;;
  esac
done

# Set up L_HOSTDIR (name of compatibility library directory) 
# and L_HOSTNAME (name of host system).

case $BUILD_HOST in
  chez)
    L_HOSTDIR="Chez"
    L_HOSTNAME="Chez Scheme"
    ;;
  larceny | larceny.bin | petit.bin)
    L_HOSTDIR=Larceny
    L_HOSTNAME="Larceny"
    ;;
  gambit)
    L_HOSTDIR="Gambit-C"
    L_HOSTNAME="Gambit-C interpreter"
    ;;
  *)
    echo "Error: unrecognized host system $BUILD_HOST."
    exit 1
    ;;
esac

# Set up TARGET.

case $OS in
  unix)    OS=-unix ;;
  generic) OS="" ;;
  macos)   OS=-macos ;;
  *) echo "Error: Unknown OS: $OS"
     exit 1
     ;;
esac

if [ $TARGET = "standard-C" ]; then
  if [ $ENDIAN = "big" ]; then
    TARGET="C-be${OS}"
  else
    TARGET="C-el${OS}"
  fi
fi

# Perform the requested action.

rm -f $TMPFILE
case $ACTION in
  build)  run_development_environment ;;
  expand) expand_file ;;
  config) config_file ;;
esac

rm -f $TMPFILE
exit 0

# Leave alone, Emacs customization
# Local variables:
#  indent-tabs-mode: nil
# End:
