;; -*- Scheme -*-
;; This is the file ~/globals.cfg.
;;
;; Larceny runtime -- definition of the "globals" table.
;;
;; History
;;   July 1 - July 5, 1994 / lth (v0.20)
;;     Combines the old files offsets.cfg and mcode.cfg; there is now
;;     one table for both millicode and globals.

(define-files "Build/globals.ch" "Build/globals.ah" "Build/globals.sh")
(define-table "Build/table.s")

(define-const heap-version "9" "HEAP_VERSION" #f #f)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Some constants
;;
;; These are used by compiled scheme, not by the compiler, so the Scheme 
;; values should not be adjusted! However, the assembly constans should
;; be adjusted, as they are used as arguments to C callouts.

(define-action assembly (lambda (x) (* x 4)))
(define-action scheme (lambda (x) x))

; garbage collection types

(define-const ecoll 0 "EPHEMERAL_COLLECTION" "EPHEMERAL_COLLECTION" "$gc.ephemeral")
(define-const tcoll 1 "TENURING_COLLECTION" "TENURING_COLLECTION" "$gc.tenuring")
(define-const fcoll 2 "FULL_COLLECTION" "FULL_COLLECTION" "$gc.full")

; offsets in the vector filled in by memstat_fillvector()

(define-const mstat-rtime 0 "STAT_RTIME" #f "$mstat.rtime")
(define-const mstat-stime 1 "STAT_STIME" #f "$mstat.stime")
(define-const mstat-utime 2 "STAT_UTIME" #f "$mstat.utime")
(define-const mstat-minflt 3 "STAT_MINFAULTS" #f "$mstat.minfaults")
(define-const mstat-majflt 4 "STAT_MAJFAULTS" #f "$mstat.majfaults")
(define-const mstat-wchi 5 "STAT_WCOLLECTED_HI" #f "$mstat.wcollected-hi")
(define-const mstat-wclo 6 "STAT_WCOLLECTED_LO" #f "$mstat.wcollected-lo")
(define-const mstat-wahi 7 "STAT_WALLOCATED_HI" #f "$mstat.wallocated-hi")
(define-const mstat-walo 8 "STAT_WALLOCATED_LO" #f "$mstat.wallocated-lo")
(define-const mstat-tshi 9 "STAT_TSCANNED_HI" #f "$mstat.tscanned-hi")
(define-const mstat-tslo 10 "STAT_TSCANNED_LO" #f "$mstat.tscanned-lo")
(define-const mstat-ecoll 11 "STAT_ECOLLECTIONS" #f "$mstat.ecollections")
(define-const mstat-tcoll 12 "STAT_TCOLLECTIONS" #f "$mstat.tcollections")
(define-const mstat-fcoll 13 "STAT_FCOLLECTIONS" #f "$mstat.fcollections")
(define-const mstat-fflush 14 "STAT_FRAMESFLUSHED" #f "$mstat.framesflushed")
(define-const mstat-gctime 15 "STAT_GCTIME" #f "$mstat.gctime")
(define-const mstat-tahi 16 "STAT_TALLOCATED_HI" #f "$mstat.tallocated-hi")
(define-const mstat-talo 17 "STAT_TALLOCATED_LO" #f "$mstat.tallocated-lo")

(define-const mstat-size 18 #f #f "$mstat.vsize")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Globals
;;
;; These are used by the compiler and must be adjusted.

(define-action scheme (lambda (x) (* x 4)))
(define-action assembly (lambda (x) (* x 4)))

(start-roots)
(define-global "G_RESULT"  "G_RESULT"  #f)
(define-global "G_ARGREG2" "G_ARGREG2" #f)
(define-global "G_ARGREG3" "G_ARGREG3" #f)
(define-global "G_REG0"    "G_REG0"    "$g.reg0")
(define-global "G_REG1"    "G_REG1"    #f)
(define-global "G_REG2"    "G_REG2"    #f)
(define-global "G_REG3"    "G_REG3"    #f)
(define-global "G_REG4"    "G_REG4"    #f)
(define-global "G_REG5"    "G_REG5"    #f)
(define-global "G_REG6"    "G_REG6"    #f)
(define-global "G_REG7"    "G_REG7"    #f)
(define-global "G_REG8"    "G_REG8"    "$r.reg8")
(define-global "G_REG9"    "G_REG9"    "$r.reg9")
(define-global "G_REG10"   "G_REG10"   "$r.reg10")
(define-global "G_REG11"   "G_REG11"   "$r.reg11")
(define-global "G_REG12"   "G_REG12"   "$r.reg12")
(define-global "G_REG13"   "G_REG13"   "$r.reg13")
(define-global "G_REG14"   "G_REG14"   "$r.reg14")
(define-global "G_REG15"   "G_REG15"   "$r.reg15")
(define-global "G_REG16"   "G_REG16"   "$r.reg16")
(define-global "G_REG17"   "G_REG17"   "$r.reg17")
(define-global "G_REG18"   "G_REG18"   "$r.reg18")
(define-global "G_REG19"   "G_REG19"   "$r.reg19")
(define-global "G_REG20"   "G_REG20"   "$r.reg20")
(define-global "G_REG21"   "G_REG21"   "$r.reg21")
(define-global "G_REG22"   "G_REG22"   "$r.reg22")
(define-global "G_REG23"   "G_REG23"   "$r.reg23")
(define-global "G_REG24"   "G_REG24"   "$r.reg24")
(define-global "G_REG25"   "G_REG25"   "$r.reg25")
(define-global "G_REG26"   "G_REG26"   "$r.reg26")
(define-global "G_REG27"   "G_REG27"   "$r.reg27")
(define-global "G_REG28"   "G_REG28"   "$r.reg28")
(define-global "G_REG29"   "G_REG29"   "$r.reg29")
(define-global "G_REG30"   "G_REG30"   "$r.reg30")
(define-global "G_REG31"   "G_REG31"   "$r.reg31")

(define-global "G_CONT"     "G_CONT"    #f)
(define-global "G_STARTUP"  "G_STARTUP" #f)
(define-global "G_CALLOUTS" "G_CALLOUTS" #f)

(define-global "G_SCHCALL_ARG4" "G_SCHCALL_ARG4" #f)  ; internal_scheme_call
(define-global "G_ALLOCI_TMP" "G_ALLOCI_TMP" #f)      ; _mem_alloci

(end-roots)

;; Non-root context variables.

(define-global "G_RETADDR"        "G_RETADDR" #f)
(define-global "G_TIMER"          "G_TIMER" #f)

;; Temporaries for generic arithmetic.

(define-global #f "G_GENERIC_NRTMP1" #f)
(define-global #f "G_GENERIC_NRTMP2" #f)
(define-global #f "G_GENERIC_NRTMP3" #f)

;; Memory management. The millicode needs the first few of these, so
;; if you don't move them you don't need to recompile the entire
;; heap.

(define-global "G_STKBOT"         "G_STKBOT" "$g.stkbot")
(define-global "G_STKP"           "G_STKP" #f)
(define-global "G_EBOT"           "G_EBOT" #f)
(define-global "G_ETOP"           "G_ETOP" #f)
(define-global "G_ELIM"           "G_ELIM" #f)
(define-global "G_TBOT"           #f #f)
(define-global "G_TTOP"           #f #f)
(define-global "G_TLIM"           #f #f)
(define-global "G_TBRK"           "G_TBRK" #f)
(define-global "G_SSBBOT"         #f #f)
(define-global "G_SSBTOP"         "G_SSBTOP" #f)
(define-global "G_SSBLIM"         "G_SSBLIM" #f)
(define-global "G_ESPACE1_BOT"    #f #f)
(define-global "G_ESPACE1_LIM"    #f #f)
(define-global "G_ESPACE2_BOT"    #f #f)
(define-global "G_ESPACE2_LIM"    #f #f)
(define-global "G_TSPACE1_BOT"    #f #f)
(define-global "G_TSPACE1_LIM"    #f #f)
(define-global "G_TSPACE2_BOT"    #f #f)
(define-global "G_TSPACE2_LIM"    #f #f)
(define-global "G_REMSET_POOLBOT" #f #f)
(define-global "G_REMSET_POOLTOP" #f #f)
(define-global "G_REMSET_POOLLIM" #f #f)
(define-global "G_REMSET_TBLBOT"  #f #f)
(define-global "G_REMSET_TBLLIM"  #f #f)
(define-global "G_STATIC_BOT"     #f #f)
(define-global "G_STATIC_TOP"     #f #f)
(define-global "G_STATIC_LIM"     #f #f)
(define-global "G_EWATERMARK"     #f #f)  ; ephemeral high-watermark
(define-global "G_THIWATERMARK"   #f #f)  ; tenured high-watermark
(define-global "G_TLOWATERMARK"   #f #f)  ; tenured low-watermark
(define-global "G_RWATERMARK"     #f #f)  ; remembered-set high-watermark
(define-global "G_GC_MUST_TENURE" #f #f)

;; process management

(define-global "G_SINGLESTEP_ENABLE" "G_SINGLESTEP_ENABLE" #f)
(define-global "G_BREAKPT_ENABLE" "G_BREAKPT_ENABLE" #f)
(define-global "G_TIMER_ENABLE"   "G_TIMER_ENABLE" #f)

;; Misc.

(define-global #f "G_SCHCALL_PROCIDX" #f)
(define-global #f "G_SCHCALL_ARGC" #f)
(define-global #f "G_PUSHTMP" #f)
(define-global #f "G_CALLOUT_TMP0" #f)
(define-global #f "G_CALLOUT_TMP1" #f)
(define-global #f "G_CALLOUT_TMP2" #f)


;; Plenty of room to grow in so that we don't have to recompile heap every
;; time we add some globals which only C knows about.

(align 256)  ; that's words, not bytes.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Millicode procedures.

;; Memory management 
;;
;; Note that $m.stkuflow is here only to support the slow stack underflow
;; logic; it is not normally needed in the table.

(define-mproc "M_ALLOC" "M_ALLOC" "$m.alloc" "_mem_alloc")
(define-mproc "M_ALLOCI" "M_ALLOCI" "$m.alloci" "_mem_alloci")
(define-mproc "M_GC" "M_GC" "$m.gc" "_mem_garbage_collect")
(define-mproc "M_ADDTRANS" "M_ADDTRANS" "$m.addtrans" "_mem_addtrans")
(define-mproc "M_STKOFLOW" "M_STKOFLOW" "$m.stkoflow" "_mem_stkoflow")
(define-mproc #f "M_INTERNAL_STKOFLOW" #f "_mem_internal_stkoflow")
(define-mproc #f #f "$m.stkuflow" "_mem_stkuflow")
(define-mproc "M_CREG" "M_CREG" "$m.creg" "_mem_capture_continuation")
(define-mproc "M_CREG_SET" "M_CREG_SET" "$m.creg-set!" "_mem_restore_continuation")

;; Generic arithmetic

(define-mproc "M_ADD" "M_ADD" "$m.add" "_m_generic_add")
(define-mproc "M_SUB" "M_SUB" "$m.subtract" "_m_generic_sub")
(define-mproc "M_MUL" "M_MUL" "$m.multiply" "_m_generic_mul")
(define-mproc "M_QUOT" "M_QUOT" "$m.quotient" "_m_generic_quo")
(define-mproc "M_REM" "M_REM" "$m.remainder" "_m_generic_rem")
(define-mproc "M_DIV" "M_DIV" "$m.divide" "_m_generic_div")
(define-mproc "M_MOD" "M_MOD" "$m.modulo" "_m_generic_mod")
(define-mproc "M_NEG" "M_NEG" "$m.negate" "_m_generic_neg")
(define-mproc "M_NUMEQ" "M_NUMEQ" "$m.numeq" "_m_generic_equalp")
(define-mproc "M_NUMLT" "M_NUMLT" "$m.numlt" "_m_generic_lessp")
(define-mproc "M_NUMLE" "M_NUMLE" "$m.numle" "_m_generic_less_or_equalp")
(define-mproc "M_NUMGT" "M_NUMGT" "$m.numgt" "_m_generic_greaterp")
(define-mproc "M_NUMGE" "M_NUMGE" "$m.numge" "_m_generic_greater_or_equalp")
(define-mproc "M_ZEROP" "M_ZEROP" "$m.zerop" "_m_generic_zerop")
(define-mproc "M_COMPLEXP" "M_COMPLEXP" "$m.complexp" "_m_generic_complexp")
(define-mproc "M_REALP" "M_REALP" "$m.realp" "_m_generic_realp")
(define-mproc "M_RATIONALP" "M_RATIONALP" "$m.rationalp" "_m_generic_rationalp")
(define-mproc "M_INTEGERP" "M_INTEGERP" "$m.integerp" "_m_generic_integerp")
(define-mproc "M_EXACTP" "M_EXACTP" "$m.exactp" "_m_generic_exactp")
(define-mproc "M_INEXACTP" "M_INEXACTP" "$m.inexactp" "_m_generic_inexactp")
(define-mproc "M_EXACT2INEXACT" "M_EXACT2INEXACT" "$m.exact->inexact" "_m_generic_exact2inexact")
(define-mproc "M_INEXACT2EXACT" "M_INEXACT2EXACT" "$m.inexact->exact" "_m_generic_inexact2exact")
(define-mproc "M_MAKE_RECTANGULAR" "M_MAKE_RECTANGULAR" "$m.make-rectangular" "_m_generic_make_rectangular")
(define-mproc "M_REAL_PART" "M_REAL_PART" "$m.real-part" "_m_generic_real_part")
(define-mproc "M_IMAG_PART" "M_IMAG_PART" "$m.imag-part" "_m_generic_imag_part")
(define-mproc "M_SQRT" "M_SQRT" "$m.sqrt" "_m_generic_sqrt")
(define-mproc "M_ROUND" "M_ROUND" "$m.round" "_m_generic_round")
(define-mproc "M_TRUNCATE" "M_TRUNCATE" "$m.truncate" "_m_generic_truncate")

;; Misc. internal

(define-mproc "M_APPLY" "M_APPLY" "$m.apply" "_m_apply")
(define-mproc "M_VARARGS" "M_VARARGS" "$m.varargs" "_m_varargs")
(define-mproc "M_TYPETAG" "M_TYPETAG" "$m.typetag" "_m_typetag")
(define-mproc "M_TYPETAGSET" "M_TYPETAGSET" "$m.typetag-set" "_m_typetag_set")
(define-mproc "M_BREAK" "M_BREAK" "$m.break" "_m_break")
(define-mproc "M_EQV" "M_EQV" "$m.eqv" "_m_eqv")
(define-mproc "M_PARTIAL_LIST2VECTOR" "M_PARTIAL_LIST2VECTOR" "$m.partial-list->vector" "_m_partial_list2vector")
(define-mproc "M_TIMER_EXCEPTION" "M_TIMER_EXCEPTION" "$m.timer-exception" "_m_timer_exception")
(define-mproc "M_EXCEPTION" "M_EXCEPTION" "$m.exception" "_m_exception")
(define-mproc "M_SINGLESTEP" "M_SINGLESTEP" "$m.singlestep" "_m_singlestep")

;; I/O and system interface

(define-mproc "M_OPEN_FILE" "M_OPEN_FILE" "$m.open-file" "_m_open_file")
(define-mproc "M_CLOSE_FILE" "M_CLOSE_FILE" "$m.close-file" "_m_close_file")
;(define-mproc "M_CREATE_FILE" "M_CREATE_FILE" "$m.create-file")
(define-mproc "M_UNLINK_FILE" "M_UNLINK_FILE" "$m.unlink-file" "_m_unlink_file")
(define-mproc "M_READ_FILE" "M_READ_FILE" "$m.read-file" "_m_read_file")
(define-mproc "M_WRITE_FILE" "M_WRITE_FILE" "$m.write-file" "_m_write_file")
(define-mproc "M_EXIT" "M_EXIT" "$m.exit" "_m_exit")
(define-mproc "M_RESOURCE_USAGE" "M_RESOURCE_USAGE" "$m.resource-usage" "_m_resource_usage")
(define-mproc "M_DUMPHEAP" "M_DUMPHEAP" "$m.dumpheap" "_m_dumpheap")


; eof

