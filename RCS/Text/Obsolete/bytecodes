Possible byte code formats.

The entry points and return points for all procedures are called
and returned to as though they were in native code.  This includes
known procedures, whose entry points are not at the beginning of
a code segment.  For debugging and disassembly, the entry and
return points of interpreted procedures must be rigidly stylized,
and the bit patterns of these entry and return points must not be
those of legitimate byte codes.

Entry point (whether external or internal) or return point for
interpreted procedure:

    jsr     xx(yy)   01001110 10101yyy xxxxxxxx xxxxxxxx


Byte code map.

    reserved         000.....
                     0001....
    movereg          001kkkkk 000kkkkk
    illegal          0100....
                     01010... nnnnnnnn
    global           01011010 xxxxxxxx xxxxxxxx
    setglbl          01011011 xxxxxxxx xxxxxxxx
    const            01011100 xxxxxxxx xxxxxxxx
    fixnum           01011101 nnnnnnnn
    op1              01011110 0ppppppp
    opx              01011111 1000pppp zzzzzzzz
    op2              011kkkkk 10pppppp
    op3              100kkkkk 11pppppp 000kkkkk
                     1010....
    load             10110000 000kkkkk nnnnnnnn
    store            10110001 000kkkkk nnnnnnnn
    lexical          10110010 mmmmmmmm nnnnnnnn
    setlex           10110011 mmmmmmmm nnnnnnnn
    lexes            10110100 xxxxxxxx xxxxxxxx nnnnnnnn
    lambda           10110101 xxxxxxxx xxxxxxxx nnnnnnnn
    save             10110110 LLLLLLLL LLLLLLLL nnnnnnnn
    jump             10110111 oooooooo oooooooo mmmmmmmm
    setrtn           10111000 LLLLLLLL LLLLLLLL
    branch           10111010 LLLLLLLL LLLLLLLL
    branchf          10111111 LLLLLLLL LLLLLLLL
    reg              110kkkkk
    setreg           111kkkkk

Data operations.

op1     prim         01011110 pppppppp                      5e pp
op2     prim,k       011kkkkk pppppppp                      6k pp
op3     prim,k2,k3   100kkkkk pppppppp 000kkkkk             8k pp kk
opx     prim,z       01011111 pppppppp zzzzzzzz             5f pp zz

Constants.

const   x            01011100 xxxxxxxx xxxxxxxx             5c xx xx
fixnum n             01011101 nnnnnnnn                      5d nn
false                10100000                               a0
true                 10100001                               a1
null                 10100010                               a2
unspecified          10100011                               a3
eof                  10100100                               a4

Variable references.

global  x            01011010 xxxxxxxx xxxxxxxx             5a xx xx
setglbl x            01011011 xxxxxxxx xxxxxxxx             5b xx xx
lexical m,n          10110010 mmmmmmmm nnnnnnnn             b2 mm nn
setlex  m,n          10110011 mmmmmmmm nnnnnnnn             b3 mm nn
stack   n            01010010 nnnnnnnn                      52 nn
setstk  n            01010011 nnnnnnnn                      53 nn
load    n,k          10110000 000kkkkk nnnnnnnn             b0 kk nn
store   k,n          10110001 000kkkkk nnnnnnnn             b1 kk nn
reg     k            110kkkkk                               ck
setreg  k            111kkkkk                               ek
movereg k1,k2        001kkkkk 000kkkkk                      2k kk

Lambda expressions.

lambda  x,n,doc      10110101 xxxxxxxx xxxxxxxx nnnnnnnn    b5 xx xx nn
lexes   n,doc        10110100 xxxxxxxx xxxxxxxx nnnnnnnn    b4 xx xx nn

Procedure calls.

args=   n            01010000 nnnnnnnn                      50 nn
args>=  n            01010001 nnnnnnnn                      51 nn
invoke  n            01010101 nnnnnnnn                      55 nn
save    L,k          10110110 LLLLLLLL LLLLLLLL nnnnnnnn    b6 LL LL nn
setrtn  L            10111000 LLLLLLLL LLLLLLLL             b8 LL LL
restore k            01010110 000kkkkk                      56 kk
pop     n            01010111 nnnnnnnn                      57 nn
return               00010000                               10
mvrtn                00010001                               11
apply                00010010                               12
nop                  00011111                               1f
jump    m,o          10110111 oooooooo oooooooo mmmmmmmm    b7 oo oo mm

Branches.

branch  L            10111110 LLLLLLLL LLLLLLLL             ba LL LL
branchf L            10111111 LLLLLLLL LLLLLLLL             bf LL LL
