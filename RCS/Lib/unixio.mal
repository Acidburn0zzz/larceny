; -*- Scheme -*-
;
; Scheme 313 run-time system
; MacScheme Assembly language glue for generic unix i/o calls.
;
; $Id: unixio.sasm,v 1.1 91/08/23 22:12:12 lth Exp Locker: lth $
;
; You want to load this file into a scheme system (after the assembler has
; been loaded) and assemble the value of the variable `unix-io' into a file.
;
; Requires integrables `open-file', `close-file', `unlink-file', `read-file',
; and `write-file'.

(define unix-io
  `((,$lambda

     ; unix$io:open takes two or three args: filename, flags, and optionally 
     ; the file mode (for creation if O_CREAT is set).

     ((,$setreg 4)
      (,$reg 4)
      (,$opx =,2)
      (,$branchf 1)
      (,$const 0)
      (,$setreg 3)
      (,$skip 3)
      (,$.label 1)
      (,$reg 4)
      (,$opx =,3)
      (,$branchf 2)
      (,$.label 3)
      (,$reg 1)
      (,$op3 open-file 2 3)
      (,$return)
      (,$.label 2)
      (,$reg 4)
      (,$args= 2 )    ; a hack -- this should always fault.
      (,$return))     ; never executed
     0)
    (,$setglbl unix$io:open)
    (,$lambda

     ; unix$io:close takes one arg: the fd.

     ((,$args= 1)
      (,$reg 1)
      (,$op1 close-file)
      (,$return))
     0)
    (,$setglbl unix$io:close)
    (,$lambda

     ; unix$io:unlink takes one arg: the filename

     ((,$args= 1)
      (,$reg 1)
      (,$op1 unlink-file)
      (,$return))
     0)
    (,$setglbl unix$io:unlink)
    (,$lambda

     ; unix$io:read takes three arguments: fd, buffer, and byte count.

     ((,$args= 3)
      (,$reg 1)
      (,$op3 read-file 2 3)
      (,$return))
     0)
    (,$setglbl unix$io:read)
    (,$lambda

     ; unix$io:write takes three arguments: fd, buffer, and byte count.

     ((,$args= 3)
      (,$reg 1)
      (,$op3 write-file 2 3)
      (,$return))
     0)
    (,$setglbl unix$io:write)
    (,$return)))
