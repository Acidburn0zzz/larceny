; -*- scheme -*-
;
; $Id$
;
; Experimental setup for loading compiled systems into environments.
; Each form defines an environment in terms of parent environment, files
; to load, and values to import from other environments.  The 
; environments must form a DAG with respect to the parent/child relationship,
; and parents must come before children in the file.
; 
; The names @interaction-environment@ and @toplevel@ are magic.

'((environment auxiliary)
  (parent @interaction-environment@)
  (files "Auxlib/misc.fasl"
	 "Auxlib/list.fasl"
	 "Auxlib/string.fasl"
	 "Auxlib/vector.fasl"
	 "Auxlib/sort.fasl"
	 "Auxlib/pp.fasl"
	 "Auxlib/io.fasl"))

'((environment experimental)
  (parent auxiliary)
  (files "Experimental/apropos.fasl"
	 "Experimental/system-stuff.fasl"
	 "Experimental/applyhook0.fasl"
	 "Experimental/applyhook.fasl"))

'((environment debugger)
  (parent auxiliary)
  (files "Debugger/debug.fasl"
	 "Debugger/inspect-cont.fasl"
	 "Debugger/countcalls.fasl"
	 "Debugger/trace.fasl"))

`((environment compiler)
  (parent auxiliary)
  (files "Compat/Larceny/compat2.fasl"
	 ,@(nbuild:twobit-files)
	 ,@(nbuild:common-asm-files)
	 "Asm/Common/link-lop.fasl"
	 ,@(nbuild:machine-asm-files)
	 ,@(nbuild:utility-files)
	 "Util/make-support.fasl"
	 "Util/init-comp.fasl"))

'((environment @interaction-environment@)
  (imports (auxiliary scheme-system)
	   (auxiliary *pi*)
	   (auxiliary remq!)
	   (auxiliary remv!)
	   (auxiliary remove!)
	   (auxiliary aremq!)
	   (auxiliary aremv!)
	   (auxiliary aremove!)
	   (auxiliary filter)
	   (auxiliary find)
	   (auxiliary make-list)
	   (auxiliary reduce)
	   (auxiliary reduce-right)
	   (auxiliary fold-left)
	   (auxiliary fold-right)
	   (auxiliary vector-copy)
	   (auxiliary read-line)
	   (auxiliary sort)
	   (auxiliary sort!)
	   (auxiliary pretty-print)
	   (auxiliary pretty-line-length)
	   (auxiliary file-newer?)
	   (auxiliary read-line)
	   ; System-level things
	   (experimental apropos)
	   (experimental object-representation)
	   (experimental object-size)
	   (experimental count-objects-in-heap)
	   (experimental gctwa)
	   (experimental room)
	   (experimental make-apply-hook)
	   (experimental apply-hook?)
	   (experimental apply-hook-procedure)
	   (experimental set-apply-hook-procedure!)
	   (experimental apply-hook-extra)
	   (experimental set-apply-hook-extra!)
	   ; Debugging
	   (debugger debug)
	   (debugger backtrace)
	   (debugger trace)
	   (debugger untrace)
	   (debugger breakpt)
	   (debugger unbreak)
	   (debugger begin-countcalls)
	   (debugger end-countcalls)
	   (debugger report-calls)
	   ; Compilation
	   (compiler compile-file)
	   (compiler assemble-file)
	   (compiler compile-and-assemble-expression)
	   (compiler identifier?)
	   ; Disassembler
	   (compiler disassemble-codevector)
	   (compiler print-instructions)
	   (compiler disassemble-file)
	   (compiler disassemble)
	   ; Compiler and assembler switches
	   (compiler compiler-switches)
	   (compiler issue-warnings)
	   (compiler include-procedure-names)
	   (compiler include-source-code)
	   (compiler include-variable-names)
	   (compiler empty-list-is-true)
	   (compiler ignore-space-leaks)
	   (compiler integrate-usual-procedures)
	   (compiler benchmark-mode)
	   (compiler local-optimizations)
	   (compiler global-optimizations)
	   (compiler representation-optimizations)
	   (compiler lambda-optimizations)
	   (compiler parallel-assignment-optimization)
	   (compiler catch-undefined-globals)
	   (compiler inline-allocation)
	   (compiler peephole-optimization)
	   (compiler unsafe-code)
	   (compiler write-barrier)
	   (compiler fill-delay-slots)
	   (compiler slow-code)
	   (compiler default-code)
	   (compiler fast-safe-code)
	   (compiler fast-unsafe-code)
	   ; Make utility
	   (compiler make:project)
	   (compiler make:new-project)
	   (compiler make:project?)
	   (compiler make:rule)
	   (compiler make:deps)
	   (compiler make:targets)
	   (compiler make:pretend)
	   (compiler make:debug)
	   (compiler make:make)))

; Remember the find-env procedure.

(lambda (find-env)
  (environment-set! (find-env '@interaction-environment@) 'find-env find-env))

; eof 
