Copyright 1998 Lars T Hansen.                   -*- text -*-

$Id$


			 KNOWN BUGS IN LARCENY


These are bugs that are or may be visible to the Scheme programmer.
Outright compiler bugs are generally only known to Will.

Bugs are listed in the order recorded.  Fixed bugs have been moved to
the file BUGS-FIXED.  Each entry consists of an entry number, the
version of Larceny in which the bug was discovered, the date it was
recorded and who found it, a description of the problem, and any
supporting documentation, information, test cases, and so on.

HIGH PRIORITY BUGS: None.


005  (v0.27e)
     Priority: low.

     While the system can now grow the heap to any size (by growing the
     descriptor tables), an attempt to start the system with more than 32MB
     or so of initial heap will result in a segmentation fault.

     The reason is that the size of the descriptor tables during startup
     is limited to 32 MB.  A larger size will result in an attempt to grow
     them, which results in a barrier function being called to install the
     new tables.  But at this point the barrier has not yet been initialized,
     so garbage is accessed.

     This is generally no longer a problem, since heaps are allocated
     lazily.  It will become a problem when someone tries to load a heap
     image of about 32MB or more.

012  (v0.28)  970507
     Priority: low.

     Remembered-set size information from the command line is disregarded
     when creating the remembered sets in the garbage collector.

     See file Rts/Sys/memmgr.c

034  v0.28f (970723 / lth)
     Priority: very low.

     The number of arguments in a procedure call expression is limited to 
     1023.  This is due to the way the argument count is set up during 
     INVOKE and the way it is compared during ARGS=, ARGS>=.

     Note that expressions like (apply + massively-long-list) still work,
     because + takes 0 or more arguments (so the comparison is with 0), and
     apply computes the correct length of the list.  It is only a syntactic
     call expression that is so limited.

     This is easy to fix, and the fix does not impact code that has no
     more than 1023 arguments in a call.

     The compiler does in fact emit an 'invoke n' instruction for even 
     large n, so this is a real bug.

036  v0.28f (970826 / lth -- old bug)
053  v0.32 (971107 / lth)
     Priority: low.

     Reader bugs

   * The reader accepts \ as an initial character in symbols, but not
     as a subsequent, and when it is an initial character, it is not
     an escape character.

     I think the right behavior for \ is to work as an escape character
     in symbols and be valid everywhere in a symbol; \c should then mean
     literally c everywhere (notably preserving case, but also allowing
     spaces, control characters, and non-standard characters).  In 
     particular, if a symbol starts with \c, then even if symbols may not
     usually start with c, the interpretation should be a symbol.

   * Another reader problem:

	(symbol->string '|#x) => ""
	(symbol->string '|#x|) => "|#x"

     On the whole, the dark corners of the input syntax are indeed dark.

042 v0.31 (971024 / lth)
    Priority: should not be fixed.

    > (+ 'a)
    a
    > (* 'a)
    a

    [Thanks to Galen, who did not report this but who told me of this
     bug in the free version of Allegro Common Lisp for Windows(!).]

056 v0.32 (980126 / lth); v0.40 (981217 / lth)
    Priority: low

    The development environment (both Chez Scheme and Larceny hosts):

	; Just finished make-larceny-heap
	> (inline-barrier)

	*** Error encountered!
	Deleting target file: larceny.heap

	Error: variable inline-barrier is not bound.
	Type (debug) to enter the debugger.

    In this case, it should not delete the previous target!  This did not
    happen on a subsequent try.  

    Notes:
    Looks like an error handler is not being taken down.

    In fact, it only appears to happen after a ^C has interrupted 
    a previous command; could it be that the interrupt handler does not
    interact properly with the error system?

057 v0.32 (980403 / lth)
    Priority: low

    display-memstats:
    * Does not distinguish information about the static area as being
      about the static area (calls it Generation#n rather than Static).
    * Displays information about the non-predictive remembered set even
      though it is not in use.

062 v0.33 (980430 / wdc)
    Priority: low

    [Performance bug]
    Floating point output is very, very slow.  The Dragon4 algorithm, which
    uses (slow) bignums, should be replaced by Dybvig's algorithm.

067 v0.34 (980603 / lth)
    Priority: low

    This is wrong:

	> (char-upcase #\ÿ)
	#\ß
	> (char-downcase #\ß)
	#\ÿ

    because these letters are not upper/lower case variants of each other. 
    This example presents a slight problem for existing character 
    processing code if an alphabetical is both upper and lower case,
    but character processing code is character set dependent anyway,
    so it must be fixed.

    [Must fix this both in the reader and in Lib/string.sch.]

069 v0.34 (980611 / lth)
    Priority: low

    Writer: this is weird but mostly benign because "read" discards the
    backslashes properly:

	> (write "a;b;c")
	"a\;b\;c"

    It's not benign when code parsing text created with write does not
    expect the backslashes; it should probably be fixed.  (On the other 
    hand it's no worse than quoting symbols with vertical bars.)

071 v0.34 (981016 / wdc)
    Priority: low

    DISASSEMBLE-FILE does not work on .fasl files.

    Notes:
    The problem here is that FASL files do not have sufficient info
    for disassembly -- the tags present in LOP files are missing.  This
    will be fixed when we go to a FASL format that allows separate 
    loading and linking, because that format will retain the tags.

072 v0.34 (981113 / lth)
    Priority: low

    The (break) procedure always invokes the RTS debugger.  It would be
    more useful if it would invoke the user-installable breakpoint handler,
    if that has been installed.
    Chez Scheme uses a parameter 'break-handler'; we should too.

074 v0.36 (981207 / dougo)
    Priority: low

    Records (defined with make-record-type et al in Experimental/record.sch)
    are no longer displayed with the record type printer; it just displays
    "#<STRUCTURE>".

    Notes:
    This is in the 0.36 "std.heap" with installed pretty printer.

    That's because the pretty printer (which is used for the repl printer) 
    does not use the structure printer to print structures.   Fixing this
    will probably require changing the semantics of the structure printer,
    which now has no notion of "layout".

077 v0.36 (981207 / lth)
    Priority: low.

    Jaffer's test suite:

	(#<PROCEDURE string->number> "3i")  ==> 0+3i
	 BUT EXPECTED #f
	(#<PROCEDURE string->number> "3I")  ==> 0+3i
	 BUT EXPECTED #f
	(#<PROCEDURE string->number> "33i")  ==> 0+33i
	 BUT EXPECTED #f
	(#<PROCEDURE string->number> "33I")  ==> 0+33i
	 BUT EXPECTED #f
	(#<PROCEDURE string->number> "3.3i")  ==> 0.0+3.3i
	 BUT EXPECTED #f
	(#<PROCEDURE string->number> "3.3I")  ==> 0.0+3.3i
	 BUT EXPECTED #f

    The problem is that the number syntax in the Report requires an 
    explicit sign if a complex has no real part.  (There are plenty of
    similar "bugs" in the number parser, see comments in the code.)

083 v0.38 (981215 / lth)
    Priority: low

    Bugs w.r.t. R4RS, R5RS, or the IEEE standard:

    * some top-level names are reserved by the macro expander:
      lambda, define, quote, begin, if, set!

    * some top-level names are reserved by the quasiquote macro:
      lambda, define, quote, begin, if, set!

084 v0.39 (981216 / lth)
    Priority: low

    Minor interpreter bug: it gives bad error messages when using
    primitive names in environments that don't have those primitives.

	> (eval '(let ((a 1)) (foo a)) (null-environment 4))
	Error: Reference to undefined global variable `foo'.
	> (eval '(let ((a 1)) (car a)) (null-environment 4))
	Error: Attempt to apply #!undefined, which is not a procedure.

    The problem is that the interpreter has a fixed notion about what
    constitutes a primitive.  Technically, there should be a primitive 
    table that is relative to the environment.

085 v0.39 (981216 / lth)
    Priority: low

    Environments should contain syntax environments, and both 
    compile-expression (Compiler/compile313.sch) and macro-expand 
    (Eval/macro-expand.sch) should allow any environment to be used.

086 v0.39 (981216 / lth)
    Priority: low

    With -stats switch, Larceny does not print size of text/static area, 
    if there's one; see print_heapstats() in Rts/Sys/stats.c.

087 v0.39 (981216 / lth)
    Priority: low

    Memstats does not return information about the static area, if any.

088 v0.40 (981219 / lth)
    Priority: low

    [Performance bug]
    When running with (integrate-usual-procedures #f), arithmetic is quite
    slow, because the definitions of '+' etc are coded in Scheme using
    rest args.  Much better would be if they were written in MAL in 
    the same way as read-char / write-char, special-casing 0, 1, 2, 3, and
    4 arguments, or, even better, using case-lambda.

    On vega:

	> (default-code)
	#t
	> (define (fib n) (if (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))
	fib
	> (run-with-stats (lambda () (fib 30)))
	Words allocated: 10770618
	Words reclaimed: 10738790
	Elapsed time...: 5863 ms (User: 5840 ms; System: 0 ms)
	Elapsed GC time: 174 ms (in 41 collections.)
	832040

    In fact, the interpreter is only 50% slower:

	vega(197) % larceny -small
	Larceny v0.40 (precise:SunOS5:split) (lth 18-Dec-98 17:59:12)

	> (define (fib n) (if (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))
	fib
	> (run-with-stats (lambda () (fib 30)))
	Words allocated: 10770624
	Words reclaimed: 10733898
	Elapsed time...: 8376 ms (User: 8200 ms; System: 20 ms)
	Elapsed GC time: 85 ms (in 41 collections.)
	832040

089 v0.40 (981219 / lth)
    Priority: low

    Should catch SIGSEGV, SIGBUS because broken unsafe code can otherwise 
    cause a core dump.

090 v0.40 (981219 / lth )
    Priority: low

    With (integrate-usual-primitives #f), calls to the primitives 
    .make-cell, .cell-ref, and .cell-set! are compiled as normal 
    procedure calls.  This runs correctly -- I've added the correct
    names to the environment -- but code that uses assignments takes
    a performance hit.

091 v0.40 (981219 / lth )
    Priority: low

    The macro expander generates calls to procedures (unspecified) and 
    (undefined).  With (integrate-usual-primitives #f), this is incorrect 
    -- either these should be the procedures (.unspecified) and (.undefined),
    in which case see Bug 090, or they should be the correct constants.

092 v0.40 (981219 / lth)
    Priority: low

    SPARC Assembler error.

    When compiling Testsuite/GC/nucleic2.sch with benchmark-block-mode,
    the assembler signals an error in sparutil.sch:emit-const->register!
    called from gen-msi.sch:emit-register->global! (setglbl), because
    there the former cannot handle more than 1023 global variables -- 
    the constant vector offset is too large.

    This should be easy to fix if the offset is always known when
    emit-const->register! is called.  If that is not the case, then
    we must implement another crock like `short-effective-addresses'.


NEXT ENTRY: 093
	
; eof
