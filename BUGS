; -*- text -*-
; ./BUGS
; $Id: BUGS,v 1.8 1997/09/17 15:24:39 lth Exp lth $


			 KNOWN BUGS IN LARCENY
			 ---------------------

These are bugs that are or may be visible to the Scheme programmer.
Bugs internal to the development system are in the file BUGS-DEV.

Bugs are listed in the order recorded.  Fixed bugs have been moved to
the file BUGS-FIXED.  Each entry consists of an entry number, the
version of Larceny in which the bug was discovered, the date it was
recorded and who found it, a description of the problem, and any
supporting documentation, information, test cases, and so on.


005  (v0.27e)

     While the system can now grow the heap to any size (by growing the
     descriptor tables), an attempt to start the system with more than 32MB
     or so of initial heap will result in a segmentation fault.

     The reason is that the size of the descriptor tables during startup
     is limited to 32 MB.  A larger size will result in an attempt to grow
     them, which results in a barrier function being called to install the
     new tables.  But at this point the barrier has not yet been initialized,
     so garbage is accessed.

012  (v0.28)  970507

     Remembered-set size information from the command line is disregarded
     when creating the remembered sets in the garbage collector.

     See file Rts/Sys/memmgr.c

019  (v0.28)  970507

     With the generational collector, it is only possible to allocate objects
     that fit in the youngest generation, and that generation is of a
     fixed size.  This should not be a problem with the stop-and-copy (heaps=1)
     or conservative collectors.

     This should be fixed by allowing objects to be allocated "on the side"
     of the youngest generation; the current barrier system should be able
     to deal with this.

021  (v0.28b) 970528

     Free list coalescing is not done properly in unix-alloc.c.  This is 
     a benign problem with the current GC structure, but should be fixed.
     - free list should be address ordered (for coalescing, and also so
       that we can return memory to the OS).
     - a new free block can merge two previously separated blocks so that
       all three blocks become one.

022  (v0.28d) 970625

     The following functions do not accept complex arguments:
	SQRT, SIN, COS, TAN, ASIN, ACOS, ATAN, LOG, EXP

     [970701: Actually, I've implemented these, but testing remains. 
      At the very least, ASIN and ACOS for values outside [1,1] must
      do something different from what they do now.  --lars]

026  (v0.28d) 970701

     LOG does not accept negative arguments.

     [970716: Actually, I've implemented this, but testing remains. --lars]

031  v0.28e (970708 / lth)

     Dynamic-wind must be made aware of timer interrupts.

032  v0.28e (970715 / lth)

     It appears that the error continuation grows longer and longer with
     each error.  This is an error.

034  v0.28f (970723 / lth)

     (This is true both in the old and new assembler.)
     The number of arguments to a procedure is limited to 1023.  This is due
     to the way the argument count is set up during INVOKE and the way it
     is compared during ARGS=, ARGS>=.

     Note that things like (apply + massively-long-list) still work,
     because + takes 0 or more arguments (so the comparison is with 0), and
     apply computes the correct length of the list.

     This is easy to fix, but before doing so, check that the compiler 
     does not in fact compile these kinds of procedures and calls specially.

035  v0.28f (970812 / lth)

     The macro expander (and Twobit?) rely on some global variables called
     %list, %list->vector, %cons, %append, and %make-promise.  

     These dependencies should be removed completely, probably by using
     magic global names (more magic than the above...) that the linker
     treats specially.

     Also NOTE that those names are not present in the null environment, 
     so some code that should run in that environment (notably code with
     quasiquotations, but perhaps other code as well) will not in fact run.
     The same fix applies.

036  v0.28f (970826 / lth -- old bug)

     The reader accepts \ as an initial character in symbols, but not
     as a subsequent, and when it is an initial character, it is not
     an escape character.

     I think the right behavior for \ is to work as an escape character
     in symbols and be valid everywhere in a symbol; \c should then mean
     literally c everywhere (notably preserving case, but also allowing
     spaces, control characters, and non-standard characters).  In 
     particular, if a symbol starts with \c, then even if symbols may not
     usually start with c, the interpretation should be a symbol.

038  v0.29a (970917 / lth)

     Typetag-set! gives a strange error message when it's not the structure
     but the typetag that is bad:

	> (typetag-set! (make-vector 3) 20)
	Error: typetag-set!: #(#f #f #f) is not typetag-settable.

NEXT ENTRY: 040.
	
; eof
