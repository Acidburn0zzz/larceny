
			    The Bugs of Larceny
			A document in several parts

			 Last updated 940719 / lth


This is the list of known bugs in Larceny, including known bugs in Twobit.
We deal only with bugs; missing features are treated in the file 'WISHLIST'.

This list is separated into sections, one section for each major module.
The current sections are:

	  I: The Chez Scheme development environment
	 II: The Larceny libraries
	III: The Sparc disassembler
	 IV: The Sparc assembler
	  V: Twobit
         VI: Run-time system
	VII: The generic assembler


---------------------------------------------------------------------------
Section I: Bugs in the Chez Development environment

001 940719 / lth (v0.20)

    In the Chez development environment, dump-fasl-segment-to-file 
    (in Compiler/makefasl.sch) is very slow. This is because each
    character is converted from an integer to a character before it
    is written, with quoting and the whole bit. Clearly, using 'write'
    would have been faster.

002 940719 / lth (v0.20)

    The make utility does not delete its target if it was only built
    partially (e.g. when the compiler failed due to an error). This
    makes things harder than they should be. A good way to fix this 
    would be to create a temporary file which is renamed when it is
    fully created.

003 940719 / lth (v0.20)

    The makefile (Lib/makefile.sch) is pretty much inscrutable. A pattern-
    based file which is then rewritten or interpreted would be much better.

004 940719 / lth (v0.20)

    The heap dumper is stupid; it should not keep the entire heap image
    in memory during the dump.

005 940721 / lth (v0.20)

    All the compilation flags should be procedures, and it might also
    be better to have a common interface to them, at least from the
    interactive environment (but perhaps also from the compiler internals),
    something along the lines of

	(compiler-switch 'foo)   =>  boolean

    and

        (compiler-switch 'foo #t)
    


---------------------------------------------------------------------------
Section II: Bugs in the Larceny libraries
            This includes some missing (reasonably crucial) procedures.


001 940719 / lth (v0.20)

    Loading a fasl file into Larceny is very slow. Probably, the I/O system
    is slow in general.

    (The I/O system should probably be cleaned up.)

002 940719 / lth (v0.20)

    Bellerophon is not included in the libraries since bignums are though
    not to work.

003 (old bug)

    Need to add error checking to float-significand and float-exponent 
    to make sure operand is flonum.

004 940719 / lth (v0.20)

    Long file names don't work well under DOS; should use short.

005 (old bug)

    The 'exit' procedure must flush all output streams before actually 
    exiting.

006 940719 / lth (v0.20)

    The libraries should be cleaned up and sorted into more reasonable
    files for related code (list, vector, char, etc). In particular,
    the procedures in Lib/integrable-procs.sch should be distributed
    throughout.

007 940719 / lth (v0.20)

    Implement 'symbol-hash' so that we can have symbol hash tables for cheap.

008 940719 / lth (v0.20)

    String-set! and friends should be primops.

009 940719 / lth (v0.20)

    The files Lib/raw-apply.mal and Lib/unixio.mal should go away; there
    should simply be reserved primops (called sys$something) which can be
    used by the compiler when it compiles library code. Or, these should
    use the syscall primitive when that gets implemented.

010 940719 / lth (v0.20)

    The millicode support vector (aka 'callouts') should be initialized
    element-by-element using defined constants, not in a huge call to
    'vector' like it is now. (Lib/millicode-support.sch.)


---------------------------------------------------------------------------
Section III: Bugs in the Sparc disassembler

001 (old bug)

    Disassembling millicode calls should cause the millicode name to be 
    printed in a comment next to the jmpli.

002 940719 / lth (v0.20)

    The disassembled syntax should be closer to the Sparc syntax. In 
    particular, syntax for the 'st' instruction is very confusing right
    now, because the register layout (which is presented by the disassembler)
    is not close to the assembly language layout for this instruction.

    In general, the disassembler could be made a little more abstract.


---------------------------------------------------------------------------
Section IV: Bugs in the Sparc assembler
	    (Note: the assembler is slated for replacement.)

001 (old bug)

    The assembler is much too forgiving: it will silently accept too-large
    constants (more than 13 bits including sign), overflowing into the
    instruction fields and generally creating a mess.

002 (old bug)

    The assembler does not do span-dependent branch optimization, so it
    always have to pessimize when it compiles code for SAVE, SETRTN, and
    JUMP.

003 (old bug)

    The assembler emits the old Sparc v7 branch chain idiom when doing
    fixnum comparisons. This idiom is illegal in later revisions of the
    architecture, and should be replaced with something legal.

004 (old bug)

    Vector instructions load the vector header twice! In general, allocation
    of temporary registers is out of hand in the assembler.

005 940721 / lth (v0.20)

    The assembler does not emit in-line generation checks for set-car! and
    set-cdr! when the flag inline-assignments is #t.


---------------------------------------------------------------------------
Section V: Bugs in twobit

001 (old bug)

    The compiler erroneously allocates spill frames on the stack,
    violating an invariant of the stack cache.

002 (old bug)

    The compiler (macro expander) generates horrible code for named LET.
    Since yours truly is a big fan of named LET, this is sometimes a 
    problem during benchmarking.

    In general, the macro expander needs to be replaced with something
    which does hygienic expansion.

003 940719 / lth (v0.20)

    There is a proliferation of compilation switches, some of which are
    variables, some of which are procedures. It would be better to at
    least have a common interface to them, even if the interface itself
    went 'behind the scenes' and updated variables or called procedures.


---------------------------------------------------------------------------
Section VI: Bugs in the run-time system

001 940719 / lth

    The garbage collector needs to be tuned, and possibly we should
    change its tenuring policy.

    In particular, tenuring policy might want to take into account the
    fullness of the remembered set.

002 940719 / lth (v0.20)

    We need to use the SunOS virtual memory primitives to see if this
    improves VM performance: locking the ephemeral areas; doing madvise
    on the tenured space before and after major collections.   

003 940719 / lth (v0.20)

    Double-word-align REG0 in the globals table.

004 940719 / lth (v0.20)

    Move all temps used by generic arithmetic into the globals table. Also,
    move dzero into the table, making it faster to load it.

005 940719 / lth (v0.20)

    The memstats should reflect the state of the world at the time of 
    the call to memstats, not just what was true at the last GC.


---------------------------------------------------------------------------
Section VII: Bugs in the generic assembler

001 940719 / lth (v0.20)

    The peephole optimizer is hard to understand (it wants to be efficient);
    it would be better to write optimizations in some pattern language which
    is then compiled to Scheme.

