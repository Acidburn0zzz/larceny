; -*- text -*-
; ./BUGS
; $Id: BUGS,v 1.8 1997/09/17 15:24:39 lth Exp lth $


			 KNOWN BUGS IN LARCENY
			 ---------------------

These are bugs that are or may be visible to the Scheme programmer.
Bugs internal to the development system are in the file BUGS-DEV.
Outright compiler bugs are generally only known to Will.

Bugs are listed in the order recorded.  Fixed bugs have been moved to
the file BUGS-FIXED.  Each entry consists of an entry number, the
version of Larceny in which the bug was discovered, the date it was
recorded and who found it, a description of the problem, and any
supporting documentation, information, test cases, and so on.


005  (v0.27e)

     While the system can now grow the heap to any size (by growing the
     descriptor tables), an attempt to start the system with more than 32MB
     or so of initial heap will result in a segmentation fault.

     The reason is that the size of the descriptor tables during startup
     is limited to 32 MB.  A larger size will result in an attempt to grow
     them, which results in a barrier function being called to install the
     new tables.  But at this point the barrier has not yet been initialized,
     so garbage is accessed.

012  (v0.28)  970507

     Remembered-set size information from the command line is disregarded
     when creating the remembered sets in the garbage collector.

     See file Rts/Sys/memmgr.c

031  v0.28e (970708 / lth)

     Dynamic-wind must be made aware of timer interrupts [some parts must
     be guarded by critical sections.]

034  v0.28f (970723 / lth)

     (This is true both in the old and new assembler.)
     The number of arguments to a procedure is limited to 1023.  This is due
     to the way the argument count is set up during INVOKE and the way it
     is compared during ARGS=, ARGS>=.

     Note that things like (apply + massively-long-list) still work,
     because + takes 0 or more arguments (so the comparison is with 0), and
     apply computes the correct length of the list.

     This is easy to fix, but before doing so, check that the compiler 
     does not in fact compile these kinds of procedures and calls specially.

035  v0.28f (970812 / lth)

     The macro expander (and Twobit?) rely on some global variables called
     %list, %list->vector, %cons, %append, and %make-promise.  

     These dependencies should be removed completely, probably by using
     magic global names (more magic than the above...) that the linker
     treats specially, possibly by having all environments inherit
     from an environment where they are bound.

     Also NOTE that those names are not present in the null environment, 
     so some code that should run in that environment (notably code with
     quasiquotations, but perhaps other code as well) will not in fact run.
     The same fix applies.

036  v0.28f (970826 / lth -- old bug)
053  v0.32 (971107 / lth)

     Reader bugs

   * The reader accepts \ as an initial character in symbols, but not
     as a subsequent, and when it is an initial character, it is not
     an escape character.

     I think the right behavior for \ is to work as an escape character
     in symbols and be valid everywhere in a symbol; \c should then mean
     literally c everywhere (notably preserving case, but also allowing
     spaces, control characters, and non-standard characters).  In 
     particular, if a symbol starts with \c, then even if symbols may not
     usually start with c, the interpretation should be a symbol.

   * Another reader problem:

	(symbol->string '|#x) => ""
	(symbol->string '|#x|) => "|#x"

     On the whole, the dark corners of the input syntax are indeed dark.

041  v0.31 (9710xx / dougo)

     The macro-expander and evaluator are not robust and produce strange 
     error messages when handed syntactically incorrect programs.  Consider,

	> (if)
	Error: car: () is not a pair.

     [Editorial: we should toss the macro-expander and switch to the
      hygienic macro package. -- lars]

042  v0.31 (971024 / lth)

     > (+ 'a)
     a
     > (* 'a)
     a

     [Thanks to Galen, who did not report this but who told me of this
      bug in the free version of Allegro Common Lisp for Windows(!).]

043  v0.31 (971024 / lth)

     [Performance bug]
     Make-string needs to be a primop.  I classify this as a bug because
     the performance implications are potentially considerable, and
     because the new pass3 wants to rely on make-string being a primop.

047  v0.31 (971029 / lth)

     `Round' does not properly round down to even (e.g., for 0.5, 2.5, 4.5)
     as exposed by the test suite and as noted in comments in 
     Sparc/generic.s; this is for flonums only (it rounds ratnums properly).

052  v0.32 (971103 / lth)

     [Performance bug]
     bignum->flonum is very, very slow.  The fix for this exists but
     needs to be implemented and tested.

054 v0.32 (971107 / lth)

    When a syntactic keyword is used as a variable, e.g.,

	> repeat

    then the macro expander gives an error and returns the syntactic
    environment, which is massive.  This is _not_ useful.  On the whole,
    macro expander errors should be mapped onto regular errors?

056 v0.32 (980126 / lth)

    Chez Scheme development environment:

	; Just finished make-larceny-heap
	> (inline-barrier)

	*** Error encountered!
	Deleting target file: larceny.heap

	Error: variable inline-barrier is not bound.
	Type (debug) to enter the debugger.

    In this case, it should not delete the previous target!  This did not
    happen on a subsequent try.

057 v0.32 (980403 / lth)

    display-memstats:
    * does not display information about the static area.
    * displays information about the non-predictive remembered set even
      though it is not in use.

NEXT ENTRY: 058
	
; eof
