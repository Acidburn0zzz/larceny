$Id$

SPARC Larceny version 1.0a2.

Major features at a glance [currently in]

  * Twobit pass 3, other compiler fixes.
  * Records.
  * Foreign function interface.
  * Performance bug fixes (named LET, CASE).
  * Correctness bug fixes (sundry).
  * SRFI support (full support to be determined).

-------------------------------

Remaining to-do items:

[General bug fixes]
  * All `high' priority bugs in BUGS:
     136: [wdc] macro expander bug
     137: [wdc] macro expander bug

  * The following `medium' priority BUGS:
     085: [wdc/lth] environments must hold syntax environments
     090, 091: [wdc] handling primitives properly even with 
               integrate-usual-procedures off.
     103: [wdc] spurious errors about redefinition of primitives with
          integrate-usual-procedures off (verified present in 0.46).
     108: [lth] make-vector bug
     130: [wdc] macro expander confused about multiple uses of variable-arity
          primitives in same scope (verified present in 0.46).

  * Tentatively the following `medium' priority BUGS:
     098: [wdc] define-inline problem
     099: [wdc] nonstandard macros available in standard environments
     089: [lth] must catch more signals

[Twobit]
  * Handling primitives correctly
  * Macro expander performance issues?  [Not a priority]
  * Compiler performance issues?        [Not a priority]

[Run-time system]
  * Must deal with more signals on Unix systems (important for buggy 
    foreign code)
  * Provide more accurate data to memstats: it is possible to provide
    up-to-date data for allocation volume and currently allocated heap,
    not just data accurate to the last GC.

[Library]
  * Top-level environments must hold syntax definitions, and the hacks
    used to work around it (in compile-expression, macro-expand-expression)
    must be removed.

[SRFI]
  * Definite: SRFI 0, SRFI 6 (string I/O), SRFI 11 (LET-VALUES)
  * Probable: SRFI 12 (Exceptions), 
  * Possible: SRFI 7 (configuration language), SRFI 9 (define-record syntax)

[FFI]
  * Add foreign-function-pointer, probably
  * Change 'unsigned' to 'uint' various places, for consistency.
  * Fix the RTLD_LOCAL / RTLD_GLOBAL bug in calls to dlopen

[Debugging]
  * Print variable names where convenient.
  * Add a command to enter a nested REPL.
  * Debugger bugs -- see FIXMEs in the files.

[Documentation]
  * Go thru toplevel.sch and make sure every non-R4RS procedure is
    documented in the User's Manual.
  * Fix reported documentation bugs (to be determined)
     - bugs: remove claim that all optional functionality is supported,
       because transcript ports are currently not supported.
     - new stuff
         QUIT, QUIT-HANDLER
         PARAMETERIZE
         LET-VALUES
         CONSOLE-INPUT-PORT-FACTORY, CONSOLE-OUTPUT-PORT-FACTORY
     - some were reported on the mailing list
        - ...
     - manual/intro.html: 
        - debugging info
        - compiler switches
        - "make setup" will no longer work.
     - manual/debugging.html:
        - remove cautionary note about tracing once bug is fixed
     - manual/fixnums.html:
        - flesh out, or cross-link to general definitions?
     - manual/ffi.html:
        - add -uint versions (and deprecate -unsigned versions??)
        - ditto type names
        - document foreign-function-pointer, when it exists.
     - manual/parameters.html
        - add current-input-port, current-output-port
     - manual/io.html:
       - changed meaning of current-input-port, current-output-port:
         they now return the new value (like all parameters)
       - introduced console-input-port, console-output-port
       - introduced print-length, print-level  [ Also parameters! ]
       - introduced binary i/o procedures
     - manual/syscontrol.html:
       - memstats now accessed via accessor functions
       - memstats vector changes:
         - some fields no longer present
         - some new fields
         - remembered-set and generation identity fields
     - manual/auxlib.html:
       - This file is a mess.  Should abandon, and fold into the other
         files?
     - manual/ephemeral.html:
       - remove debug stuff
       - clean up or move record stuff
     - manual/compiling.html -- read and redo 
       - note Rts/Sys/config.h
       - note change in 'make setup'
     - manual/starting.html -- many more switches now
     - manual/repl.hmtl
       - the repl's use of the console, and how it controls timer 
         interrupts and resets.
     - manual/developing.html:
       - build probably has more switches now?
     - manual/bdw.html:
       - setup process now more complicated since there is a lot of 
         support inside the (modified) collector.  How to deal with that?
     - manual/concept.html:
       - needs some cleanup (see the file).

[General clean-up]
  * From Will:
     >Compiler/pass2.aux.sch and Lib/procinfo.sch both contain magic
     >constants, accessors, and setters for the documentation slot.
     >This information should exist in only one place, and it has to
     >be part of the development environment.

[Standard builds]
  * [discussion item]
    Rename `r5rs.heap' as `interpreter.heap' (since it's more than R5RS).
    Consider making a `r5rs.heap' that contains only r5rs procedures.
  * The debugger needs to be part of interpreter.heap.
  * Should create scripts that setup correct compiler switches before
    compiling all files for standard heaps; automate the entire process
    of building the heaps.  Eg., Scripts/build-larceny-heap.

----------------------------------------------------------------------

Projects finished

[FFI]


----------------------------------------------------------------------

Release process checklist etc

Bug to watch out for: The binary archives have a symbolic link to the
binary, rather than the binary, due to the directory structure's use of
links.

Observe that the Standard-FFI is _not_ portable between operating
systems, not even between SunOS 4 and SunOS 5.  The reason is different
name mangling (prepended underscore on SunOS 4, none on SunOS 5).  Thus
larceny.heap must be built for each system.  Annoying but it's the way
it is for now (see TODO for more info).

[Release]
  * Source freeze (in this order):                                
    - Branch source tree as branch-1-0-a1                         
      cvs rtag -b branch-1-0-a1 larceny_src                       
      cvs rtag -b branch-1-0-a1 larceny_doc                       
  * Source archive                                                
    - move version number on branch to 1.0a1                      
    - iterate until it works:
      - cvs export on branch-1-0-a1                               
      - run Scripts/release-1.0a1                                 
        *** It was necessary to fix the script to
            use rm -rf rather than rm -f on directories.
      - run ( cd Rts; BUILD_HOST=chez make config )               
        *** It was necessary to run `make setup' first to
            create directories, setup links, edit `build'.
            Then it was necessary to remove .o files in 
            Compat/Chez.
      - make source archive  larceny-1.0a1-src.tar.gz             
        *** It was necessary to manually remove RELEASE-NOTES,
            which doesn't go in the archive (wasn't finished,
            either).
      - install, rebuild, run some simple tests.                  
        *** `make setup' gives harmless error messages because
            the cfg files are already in the Build directory
            when linking happens; we should check before linking.
  * Doc archive                                                   
    - create archive
  * Archives:
    - Get binary distributions from the source archive builds     
    - Archive names and contents
      larceny-1.0a1-src.tar.gz                                    
        pruned src tree
      larceny-1.0a1-sunos4-bin.tar.gz                             
        binary, heaps, Scripts/*, COPYRIGHT
      larceny-1.0a1-sunos5-bin.tar.gz                             
        binary, heaps, Scripts/*, COPYRIGHT
      larceny-1.0a-doc.tar.gz                                     
        (pruned?) doc tree
  * Finish release notes (do not go in ARCHIVE).                  
  * Put release date on download page.                            
  * Add archive sizes on download page.                           
  * Move archives and files to FTP directory
  * Test that FTP works the way it's supposed to.
  * Install documentation somewhere useful; put a permanent 
    link to it on the home page.
  * Backup archives onto MO-disk.                                 
  * Install Larceny in /proj/will/Apps/larceny!                   

