$Id$

SPARC Larceny version 1.0a2.

Major features at a glance [currently in]

  * Twobit pass 3, other compiler fixes.
  * Records.
  * Foreign function interface.
  * Performance bug fixes (named LET, CASE).
  * Correctness bug fixes (sundry).
  * SRFI support (full support to be determined).

-------------------------------

Remaining to-do items:

[General bug fixes]
  * All `high' priority bugs in BUGS:
     136: [wdc] macro expander bug
     137: [wdc] macro expander bug

  * The following `medium' priority BUGS:
     085: [wdc/lth] environments must hold syntax environments
     090, 091: [wdc] handling primitives properly even with 
               integrate-usual-procedures off.
     103: [wdc] spurious errors about redefinition of primitives with
          integrate-usual-procedures off (verified present in 0.46).
     130: [wdc] macro expander confused about multiple uses of variable-arity
          primitives in same scope (verified present in 0.46).
     147: [wdc] macro expander bug

  * Tentatively the following `medium' priority BUGS:
     098: [wdc] define-inline problem
     099: [wdc] nonstandard macros available in standard environments
     089: [lth] must catch more signals

[Twobit]
  * Handling primitives correctly
     - depends on syntax environment bug fix
  * Better debug information
     - lth must write spec first [done, see Debugger/debug-info.txt]

[Run-time system]
  * Provide more accurate data to memstats: it is possible to provide
    up-to-date data for allocation volume and currently allocated heap,
    not just data accurate to the last GC.
  * Must deal with more signals on Unix systems (important for buggy 
    foreign code)

[Library]
  * Top-level environments must hold syntax definitions, and the hacks
    used to work around it (in compile-expression, macro-expand-expression)
    must be removed.
     - lth must propose spec
  * The following magic/compiler-internal names in the toplevel 
    environment must be given new names (e.g., starting with `.'),
    and Lib/Sparc/toplevel.sch must be fixed; presumably when the
    primitive situation has been fixed these can just go away
    altogether:
	car:pair
	cdr:pair
	=:fix:fix, <:fix:fix, <=:fix:fix, >:fix:fix, >=:fix:fix
	vector-length:vec
	vector-ref:trusted
	vector-set!:trusted

[SRFI]
  * Definite: SRFI 0  (basic)          [ done, modulo adding SRFIs ]
              SRFI 6  (string I/O)     [ done -- built-in ]
              SRFI 11 (LET-VALUES)     [ done -- built-in ]
  * Probable: SRFI 12 (Exceptions)     [ done -- pending exception 
					 hierarchy definition ]
  * Possible: SRFI 7  (Program-based configuration language)  [ done ]
              SRFI 9  (DEFINE-RECORD-TYPE syntax)             [ done ]

[Debugging]
  * Print variable names where convenient.
     - must have info from compiler first.
  * Revise the command set, and update the documentation to reflect
    the revisions.

[General clean-up]
  * Compiler/pass2.aux.sch and Lib/procinfo.sch both contain magic
    constants, accessors, and setters for the documentation slot.
    This information should exist in only one place, and it has to
    be part of the development environment.
  * Remove some of the weirder list and string procs and macros in Auxlib.

[Scripts/options]
  * Scripts may have to be aware of the new command line arguments,
    because the scripts process command line arguments too.
  * The help printed by larceny is pertinent to running the binary
    directly but not to running the shell script (which accepts 
    -small, does not accept heap file, adds -args implicitly, and
    accepts files to load (because the heap runs the REPL)).  Perhaps
    we should have the script print an appropriate help text that is
    independent of the binary's (and shorter, not mentioning all the
    GC options).
  * Really do need a -noinit file that avoids loading .larceny.
    The messy part of this is that the REPL does that loading but
    the binary interprets the options... so the -noinit must be
    passed _after_ -args, which is just not intuitive.  Instead the
    binary could recognize that -noinit needs to be passed as
    an argument to the Scheme program, when it is run, but that 
    is a mess also.  The best seems to be for the script to pass
    -noinit after -args.

[Standard builds]
  * No longer any need to load Auxlib/vector.sch since vector-copy is
    in the bootstrap heap.
  * Need to hide the nbuild internals in Util/std-heap.sch
  * Need to hide the FFI internals in Util/std-heap.sch
  * Need to avoid loading FFI source so we don't include the source code.
  * Need to not load Experimental/exception.sch in std-heap.sch, as it
    will be replaced by SRFI 12.
  * [discussion item]
    Rename `r5rs.heap' as `interpreter.heap' (since it's more than R5RS).
    Consider making a `r5rs.heap' that contains only r5rs procedures.
  * The debugger needs to be part of interpreter.heap.
  * Should create scripts that setup correct compiler switches before
    compiling all files for standard heaps; automate the entire process
    of building the heaps.  Eg., Scripts/build-larceny-heap.

[Documentation]
  * The following non-R5RS procedure are not in the User Manual's 
    procedure index, at least.  Must add them and create documentation
    for the ones that have none.

	syscall
	make-environment
	environment*
	fl+, fl-, fl--, fl*, fl=, fl<, fl<=, fl>, fl>=
	make-trampoline
	evaluator		[ a parameter ]
	procedure-arity, other procedure doc fns
	interpreted-*?, interpreted-expression-source
	open-binary-*-file
	call-with-binary-*-file
	with-*-*-binary-file    [ These are silly -- nuke them ]
	format			[ Park it or move it ]
	port-name
	write-bytevector-like   [ Who uses this and not lowlevel-write?]
	lowlevel-write	        [ Who uses this and not write-bytevector-like?]
	readtable-ref
	readtable-set!
	console-input-port, console-output-port, *-factory
	print-length, print-level
	call-with-error-handler	[ Obsolete -- use parameterize ]
	call-without-errors	[ Obsolete -- use parameterize ]
	call-with-reset-handler	[ Obsolete -- use parameterize ]
	quit
	quit-handler		[ A parameter ]
	make-parameter
	current-continuation-structure
	make-bytevector is misspelled make-bytevector?
	bytevector-like? is misplaced
	macro-expand
	system-function		[ Largely obsolete? ]
	sys$C-ffi-*		[ Should probably be .c-ffi-* ]
	peek-bytes, poke-bytes
	delete-file is misplaced
	memstats-*
	command-line-arguments
	system
	repl
	repl-level		[ A parameter ]
	unspecified, undefined
        sys$codevector-iflush	[ Used by FFI ]

  * Fix reported documentation bugs (to be determined)
     - bugs: remove claim that all optional functionality is supported,
       because transcript ports are currently not supported (they are
       in Experimental and depend on the experimental user-level I/O system)
     - new stuff
         QUIT, QUIT-HANDLER
         PARAMETERIZE, MAKE-PARAMETER
         LET-VALUES
         CONSOLE-INPUT-PORT-FACTORY, CONSOLE-OUTPUT-PORT-FACTORY
	 REPL-LEVEL
     - some were reported on the mailing list
        - ...
     - manual/intro.html: 
        - debugging info
        - compiler switches
        - "make setup" will no longer work.
     - manual/fixnums.html:
        - flesh out, or cross-link to general definitions?
     - manual/ffi.html:
        - add -uint versions (and perhaps deprecate -unsigned versions)
        - ditto uint type name
        - document FOREIGN-FUNCTION-POINTER
     - manual/parameters.html
        - add CURRENT-INPUT-PORT, CURRENT-OUTPUT-PORT
     - manual/io.html:
       - changed meaning of CURRENT-INPUT-PORT, CURRENT-OUTPUT-PORT:
         they now return the new value (like all parameters)
       - introduced CONSOLE-INPUT-PORT, CONSOLE-OUTPUT-PORT
       - introduced PRINT-LENGTH, PRINT-LEVEL  [ Also parameters! ]
       - introduced binary i/o procedures
     - manual/syscontrol.html:
       - memstats now accessed via accessor functions
       - memstats vector changes:
         - some fields no longer present
         - some new fields
         - remembered-set and generation identity fields
     - manual/auxlib.html:
       - This file is a mess.  Should abandon, and fold into the other
         files?
     - manual/ephemeral.html:
       - remove debug stuff
       - clean up or move record stuff
     - manual/compiling.html -- read and redo 
       - note Rts/Sys/config.h
       - note change in 'make setup'
     - manual/starting.html -- many more switches now
     - manual/repl.hmtl
       - the repl's use of the console, and how it controls timer 
         interrupts and resets.
     - manual/developing.html:
       - build probably has more switches now?
     - manual/bdw.html:
       - setup process now more complicated since there is a lot of 
         support inside the (modified) collector.  How to deal with that?
     - manual/concept.html:
       - needs some cleanup (see the file).

----------------------------------------------------------------------

Projects finished

[FFI]


----------------------------------------------------------------------

Release process checklist etc

Bug to watch out for: The binary archives have a symbolic link to the
binary, rather than the binary, due to the directory structure's use of
links.

Observe that the Standard-FFI is _not_ portable between operating
systems, not even between SunOS 4 and SunOS 5.  The reason is different
name mangling (prepended underscore on SunOS 4, none on SunOS 5).  Thus
larceny.heap must be built for each system.  Annoying but it's the way
it is for now (see TODO for more info).

[Release]
  * Source freeze (in this order):                                
    - Branch source tree as branch-1-0-a1                         
      cvs rtag -b branch-1-0-a1 larceny_src                       
      cvs rtag -b branch-1-0-a1 larceny_doc                       
  * Source archive                                                
    - move version number on branch to 1.0a1                      
    - iterate until it works:
      - cvs export on branch-1-0-a1                               
      - run Scripts/release-1.0a1                                 
        *** It was necessary to fix the script to
            use rm -rf rather than rm -f on directories.
      - run ( cd Rts; BUILD_HOST=chez make config )               
        *** It was necessary to run `make setup' first to
            create directories, setup links, edit `build'.
            Then it was necessary to remove .o files in 
            Compat/Chez.
      - make source archive  larceny-1.0a1-src.tar.gz             
        *** It was necessary to manually remove RELEASE-NOTES,
            which doesn't go in the archive (wasn't finished,
            either).
      - install, rebuild, run some simple tests.                  
        *** `make setup' gives harmless error messages because
            the cfg files are already in the Build directory
            when linking happens; we should check before linking.
  * Doc archive                                                   
    - create archive
  * Archives:
    - Get binary distributions from the source archive builds     
    - Archive names and contents
      larceny-1.0a1-src.tar.gz                                    
        pruned src tree
      larceny-1.0a1-sunos4-bin.tar.gz                             
        binary, heaps, Scripts/*, COPYRIGHT
      larceny-1.0a1-sunos5-bin.tar.gz                             
        binary, heaps, Scripts/*, COPYRIGHT
      larceny-1.0a-doc.tar.gz                                     
        (pruned?) doc tree
  * Finish release notes (do not go in ARCHIVE).                  
  * Put release date on download page.                            
  * Add archive sizes on download page.                           
  * Move archives and files to FTP directory
  * Test that FTP works the way it's supposed to.
  * Install documentation somewhere useful; put a permanent 
    link to it on the home page.
  * Backup archives onto MO-disk.                                 
  * Install Larceny in /proj/will/Apps/larceny!                   

