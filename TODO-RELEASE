$Id$

SPARC Larceny version 1.0a2, tentative release date 1 June 1999.

-------------------------------

Major features at a glance:

  * Twobit pass 3
  * Foreign function interface
  * Performance bug fixes (named LET, CASE)
  * Other bug fixes
  * General clean-up

-------------------------------

Remaining to-do items:

[Twobit]
  * SRFI-0, if finalized early enough (unlikely).
  * Macro expander performance.
  * Implement and test pass 3.
  * Test, test, test.

[General bug fixes]
  * All `high' priority bugs in BUGS.
  * The following `medium' priority BUGS:
     (list to be determined)

[FFI -- call-outs only]
  * Make it work (see TODO).
  * Consider creating an FFIGEN back-end and releasing it.

[Assembler]
  * Performance: get rid of branch target association list and replace
    it by a bit vector.
  * Assemble-file is only so-so useful in larceny.heap because it can't do
    MAL files -- the MAL names are not bound, and EVAL is used.  We can
    either:
      - bind the MAL names -- gratuitous namespace pollution.
      - change the MAL syntax to be all-symbolic -- attractive.
      - remove the binding of assemble-file -- it really only belongs
        in the development environment anyway.
      - elaborately hack assemble-file to create an environment that
        contains the MAL names and use this for EVAL -- way too elaborate.

[Library]
  * Top-level environments must hold syntax definitions, and the hacks
    used to work around it (in compile-expression, macro-expand-expression)
    must be removed.

[Debugging]
  * Trace procedures rather than names.
  * Fix `break', reinstate `debugvsm' for what `break' does now.
  * Rename `breakpt' as `break-entry'.
  * Print variable names if at all possible -- at least trace-entry and
    break-entry can print variable names and values if variable names
    or source code are present.

[Documentation]
  * Describe new compiler switches
  * Describe any other changes
  * Fix reported bugs (to be determined)

[General clean-up]
  * SPARC larceny does not currently compile with LCC:
    - Can't currently compile with lcc because the Sys/config.h trick 
      to determine the platform does not work with lcc.  A reasonable 
      fix is to make `make setup' determine the platform and record it 
      in Sys/config.h; the current trick is in any case very brittle.
    - It hasn't a prayer compiling Sys/signals.c
    - It picks up LCC header files rather than system header files,
      which is wrong.
  * Rename some files:
      Util/std-heap.sch    ->   Util/larceny-heap.sch
      Util/init-comp.sch   ->   Util/larceny-heap-init.sch
      Eval                 ->   Interpreter
      Eval/eval.sch        ->   Interpreter/interp.sch
      Eval/evalprim.sch    ->   Interpreter/interp-prim.sch
  * From Will:
      >Compiler/pass2.aux.sch and Lib/procinfo.sch both contain magic
      >constants, accessors, and setters for the documentation slot.
      >This information should exist in only one place, and it has to
      >be part of the development environment.

[Standard builds]
  * [discussion item]
    Rename `r5rs.heap' as `interpreter.heap' (since it's more than R5RS).
    Consider making a `r5rs.heap' that contains only r5rs procedures.
  * The debugger needs to be part of interpreter.heap.
  * Should create scripts that setup correct compiler switches before
    compiling all files for standard heaps; automate the entire process
    of building the heaps.  Eg., Scripts/build-larceny-heap, etc.

----------------------------------------------------------------------

Release process checklist etc

Bug to watch out for: The binary archives have a symbolic link to the
binary, rather than the binary, due to the directory structure's use of
links.

[Release]
  * Source freeze (in this order):                                
    - Branch source tree as branch-1-0-a1                         
      cvs rtag -b branch-1-0-a1 larceny_src                       
      cvs rtag -b branch-1-0-a1 larceny_doc                       
  * Source archive                                                
    - move version number on branch to 1.0a1                      
    - iterate until it works:
      - cvs export on branch-1-0-a1                               
      - run Scripts/release-1.0a1                                 
        *** It was necessary to fix the script to
            use rm -rf rather than rm -f on directories.
      - run ( cd Rts; BUILD_HOST=chez make config )               
        *** It was necessary to run `make setup' first to
            create directories, setup links, edit `build'.
            Then it was necessary to remove .o files in 
            Compat/Chez.
      - make source archive  larceny-1.0a1-src.tar.gz             
        *** It was necessary to manually remove RELEASE-NOTES,
            which doesn't go in the archive (wasn't finished,
            either).
      - install, rebuild, run some simple tests.                  
        *** `make setup' gives harmless error messages because
            the cfg files are already in the Build directory
            when linking happens; we should check before linking.
  * Doc archive                                                   
    - create archive
  * Archives:
    - Get binary distributions from the source archive builds     
    - Archive names and contents
      larceny-1.0a1-src.tar.gz                                    
        pruned src tree
      larceny-1.0a1-sunos4-bin.tar.gz                             
        binary, heaps, Scripts/*, COPYRIGHT
      larceny-1.0a1-sunos5-bin.tar.gz                             
        binary, heaps, Scripts/*, COPYRIGHT
      larceny-1.0a-doc.tar.gz                                     
        (pruned?) doc tree
  * Finish release notes (do not go in ARCHIVE).                  
  * Put release date on download page.                            
  * Add archive sizes on download page.                           
  * Move archives and files to FTP directory
  * Test that FTP works the way it's supposed to.
  * Install documentation somewhere useful; put a permanent 
    link to it on the home page.
  * Backup archives onto MO-disk.                                 
  * Install Larceny in /proj/will/Apps/larceny!                   

