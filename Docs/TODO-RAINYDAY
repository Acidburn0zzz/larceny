Copyright 1998 Lars T Hansen.               -*- Text -*-

$Id$


	       Rainy day projects for the Larceny hacker


Portable Graphical User Interface support
  Requirements: 
    Must run on Unix, Win32, and MacOS.  Would be nice if it runs
    on or can easily be ported to BeOS and QNX.
  We need to evaluate our options:
  - vxWindows (need a C++ FFI) (mflatt says "don't do it")
  - Tk (need a C FFI) (mflatt says "don't do it")
  - a Java-based interface.  Then we need a Java FFI, which is hard,
    unless the Scheme system is actually generating java code (see below).
  - others?  (Shriram suggests Qt, but portability?)
  Tk is attractive because it's pervasive and supported; it's unattractive
  because it's pretty slow and (at least prior to version 8) had no
  GC support.

Mark/sweep non-predictive collector.
Will's fast write barrier.
Hybrid card-marking/remembered-set write barrier.
Garbage collector that segregates non-scannable data.
Exception system.
Module system.
Java code generator and libraries.
Unicode support.
A real debugger (the existing debugger should be scrapped).
A profiler.
Document the extensible I/O system.
A faster reader (maybe).
A faster printer (maybe).
A garbage collector written mostly or entirely in Scheme.
Larceny on Nexus.
Grand Larceny.
Many larceny notes.


Projects currently under-way
----------------------------

FFIGEN version 2.
  Much has been done, much remains.

Generic bitwise operations, as discussed at implementors' meeting.
  I've written much of this code, but it's not done.

Bytecode code generator, libraries, and interpreter.
  I've written the bytecode interpreter.  Quite a bit of design and
  coding remains to be done.  The big unknown that must be resolved
  is how to interact with compiled code.

C Code generator (Petit Larceny)
  Mostly operational on Mac, Unix, partly on Win32.  
  - Much code still Unix-centric (relies on MetroWerks or Cygwin).
  - Some portability issues currently ignored but visible.

Generic functions (see Experimental/generic/*)
  We can build generic functions on top of the record system, the
  apply hooks, and a simple type facility.  Much of this code exists.

Record system (see Experimental/record.*).
  We need to tune the code, and consider a name-hiding facility for
  partial opacity.

FFI (see Ffi/*).
  Primarily call-backs and GC issues remain to be resolved -- the hard
  ones.  Much has been done, and the architecture is in place.

Simple type-propagation Pass 3 (source not available).
  Stalled due to problems with lambda-lifting.

Threads package (see Experimental/tasking for existing code).
  General design is done, code works.

; eof
