Building and using Petit Larceny for Dummies
17 December 2004 / pnkfelix+samth

We've tried to come up with a unified build system for Petit that
involves no file editting, to make it easy for us to distribute
Larceny and not have to force people to always edit the source code
just to bootstrap Petit Larceny.

Here are the commands you want to run.  At the moment, there are two
parameters you need to pass in one of the scheme expressions.  Here
are some of the valid values for those parameters:

HOST_SCHEME ::= 'mzscheme | 'larceny | 'petite | 'chez
PLATFORM    ::= 'macosx | 'solaris | 'linux86 | 'win32

Currently, we support MzScheme 209; MzScheme 299 will be supported in a
later release.  Use (Petite) Chez at your own risk.

There are also several optional parameters, which turn on features of
the compiler.

'native - This will enable native compilation on platforms on which it
          is supported.  Currently this is for Sparc/Solaris and Intel
          (via NASM).
'code-cov - This enables loading of the instrumented files generated by
          the stcov tool when loading the compiler. Use this to test
          code coverage of the compiler testsuite
'rebuild-code-cov - This causes the stcov files to be regenerated before
          loading.  This implies 'code-cov.

If you don't like passing parameters all the time, you can just change
the appropriate global definitions (the ones with asterisks) in
petit-setup.sch, and do (unix-initialize) instead of (setup 'host: ...
'target: ...).  But if you're working with other people, it is nice to
have a unified description (transcript) of how you built Petit Larceny.

> (load "Util/petit-setup.sch")
> (setup 'scheme: ${HOST_SCHEME} 'host: ${PLATFORM})
;; e.g. (setup 'scheme: 'larceny 'host: 'solaris)
;; e.g. (setup 'scheme: 'mzscheme 'host: 'win32 'native)

;; First time only:
> (setup-directory-structure)

;; First time, or any time you change "features"
;; (e.g. arguments to setup above) or Rts/*.cfg:
> (build-config-files)

> (load-compiler)
> (build-heap)
> (build-runtime)
> (build-executable)

;; If you want the compiler:
> (build-twobit)
