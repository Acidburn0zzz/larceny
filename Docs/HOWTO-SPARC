Building and using SPARC-native Larceny
23 November 2004 / lth


                   *** THIS FILE IS NOT YET COMPLETE ***


HOW TO BUILD LARCENY AND USE THE BUILD ENVIRONMENT

General build instructions are in HOWTO-BUILD.


BUILDING AN APPLICATION

Larceny supports loading of arbitrary dynamic code and heap dumping, so
in order to build an "application" you compile the files you want to
include in the application using COMPILE-FILE, then load the resulting
.FASL files using LOAD, and dump the new heap image using
DUMP-INTERACTIVE-HEAP.  See the user's manual for more information on
these procedures.


COMPILING TWOBIT

A simple abstraction in Util/sparc-unix.sch is called BUILD-TWOBIT:

    > (build-twobit)

The BUILD-TWOBIT command compiles all the Twobit source files.  To
dump a heap image containing the compiled development environment,
...

If you build Twobit using BUILD-TWOBIT, and then start "twobit" and
follow the directions above (loading "Util/petit-unix-el.sch", say, and
then running LOAD-COMPILER), you will have a development environment
with a compiled compiler, suitable mainly for compiler development.

See a later section for how to turn Twobit into a standalone compiler
for other kinds of development.


COMPILING AND LOADING YOUR OWN PROGRAMS

On some systems it is possible to load compiled Scheme code
dynamically.  A driver routine called COMPILE-FILES compiles a group
of Scheme files into a single shared object and a group of code-less
FASL files.  Loading the FASL files with LOAD will load and link the
shared object:

    > (compile-files '("fib.sch") "fib.fasl")
    > (load "fib.fasl")
    > (fib 10)
    55

Note that a single C source file is generated from all the Scheme
source files in the input list.  Be aware that some C compilers have
problems with very large files at high optimization settings.


BOOTSTRAPPING

There is an *example* Makefile called 'bootstrap.mak' that you can use
to build Petit Larceny from C sources.  This requires that you cross
compile to C on some other host.  Cross compilation is supported in
the same build environment as described above; for example, the file
"Util/petit-macosx-on-win32.sch" was used to cross-compile to C for
MacOS X from a Win32 system.


INSTALLING TWOBIT ON YOUR SYSTEM

Installing Twobit outside the Larceny build directory is complicated,
and it requires that Petit Larceny be able to dump a heap image on your
system, which generally means that a program must always be loaded at
the same address every time it is executed.  Systems that do not obey
this rule include the old MacOS and probably most operating systems on
machines without paged memory support -- handhelds, phones, and other
embedded-type devices.

Anyway, to create a standalone compiler do the following:

  (1) Create directories /usr/lib/larceny/include and /usr/lib/larceny/lib
  (2) In the development directory, start twobit:
         ./twobit -stopcopy
      and load the development environment in the normal manner
      with LOAD-COMPILER.
  (3) Incant
         > (install-twobit "/usr/lib/larceny")
         > (dump-interactive-heap "twobit.heap")
      This copies a bunch of files to your new directories and creates
      a heap image containing twobit, but also changes some global
      settings internally about where twobit will look for include files
      and libraries
      [Hint: you need write access to that directory.]
  (4) Exit.  There should be a file twobit.heap in the current
      directory.
  (5) Test it by starting the twobit executable with twobit.heap
      as its argument, then evaluate
         > COMPILE313
      The REPL should print #<PROCEDURE compile313>.
  (6) Exit.  Copy the twobit executable and twobit.heap to /usr/lib/larceny,
      then create another script in /usr/bin called "twobit" which
      contains
        /usr/lib/larceny/twobit /usr/lib/larceny/twobit.heap
      You should now be able to type 'twobit' anywhere, and you should
      be able both to compile to FASL and to create entire applications
      using BUILD-APPLICATION.


--- Local Variables: ---
--- mode: text ---
--- indent-tabs-mode: nil ---
--- End: ---
