Building Larceny
27 April 2006 / pnkfelix+samth+tov

WHAT YOU NEED

You will need a Scheme system to host the Larceny build process;
currently this works with MzScheme 209 and Larceny [1].

Additional requirements for building Petit Larceny are the same as the
requirements for compiling Scheme sources using Larceny (see
../README-FIRST.txt).  For Native Larceny (SPARC), you will need a C
compiler (such as GCC).


WHAT TO DO

Building Larceny has three major steps:

1. Get the Larceny development environment working.

Run your host Scheme (either another Larceny or MzScheme 209), and
change to the root directory of the Larceny tree.

    > (load "setup.sch")
    > (setup 'scheme: ${SCHEME} 'host: ${HOST} [ 'native | 'nasm | 'sassy ])
    > (build-config-files)              ; [2]
    > (load-compiler)

The call to setup (above) has several options that determine which
version of Larceny you build:

        SCHEME ::= 'mzscheme | 'larceny | 'petite | 'chez       [3]
        HOST   ::= 'macosx | 'solaris | 'linux86 | 'win32

Additionally, the optional 'native flag will build Native Larceny
(SPARC) on Solaris; 'nasm will use the NASM backend on x86; 'sassy will
use the Sassy backend on x86.  The 'nasm or 'sassy flag is necessary to
use dynamic loading on Win32, and is thus strongly recommended in that
case.  There are several other optional flags that change the compiler's
behavior [3].

Some useful examples which are known to work:

    > (setup 'scheme: 'larceny  'host: 'solaris 'native)
    > (setup 'scheme: 'mzscheme 'host: 'win32 'sassy)
    > (setup 'scheme: 'larceny  'host: 'linux86 'nasm)
    > (setup 'scheme: 'mzscheme 'host: 'linux86)
    > (setup 'scheme: 'larceny  'host: 'solaris)
    > (setup 'scheme: 'mzscheme 'host: 'macosx)


2. Build Larceny components

After the development environment is setup, you should compile the core
system:

    > (build-heap)
    > (build-runtime)
    > (build-executable)

You will now have a working Larceny interpreter and minimal heap image.

To build a complete Larceny user system, including the Twobit compiler:

    > (build-larceny-files)

On Petit, you may want to build the Twobit compiler development
environment:

    > (build-twobit)



3. Create heap images

Step 2 above creates a bootstrap heap (petit.heap, sparc.heap, or
sasstrap.heap).  To create the user and development heap images, exit
the host Scheme back to your command shell.

On Native Larceny (SPARC):

    % ./larceny.bin -stopcopy -- src/Build/sparc-larceny-heap.sch
    > (exit)

    % ./larceny.bin -stopcopy -- src/Build/sparc-twobit-heap.sch
    > (exit)
    % cp larceny twobit

On IAssassin Larceny (Intel) [4]:

    % "./larceny.bin" -stopcopy -- src/Build/iasn-larceny-heap.sch
    > (exit)

    % "./larceny.bin" -stopcopy -- src/Build/iasn-twobit-heap.sch
    > (exit)
    % cp larceny twobit

On Petit Larceny:

    % ./petit-larceny.bin -stopcopy
    > (load "setup.sch")
    > (setup [ 'nasm ])
    > (load-compiler)
    > (load "src/Build/petit-larceny-heap.sch")
    > (exit)

    % ./twobit.bin -stopcopy -- src/Build/petit-twobit-heap.sch
    > (dump [ 'nasm ])
    > (exit)

You can now run ./twobit, ./larceny, or ./petit-larceny.


NOTES

[1] Currently we support MzScheme 209; MzScheme 3xx will be supported in
a later release.  Use (Petite) Chez at your own risk.

[2] This is only strictly necessary the first time and when the options
given to setup have changed, but it should be safe to do every time.

[3] Some other potentially useful flags, given optionally at the end of
the call to setup:

    'code-cov
        This enables loading of the instrumented files generated by the
        stcov tool when loading the compiler. Use this to test code
        coverage of the compiler testsuite

    'rebuild-code-cov
        This causes the stcov files to be regenerated before loading.
        This implies 'code-cov.

    'always-source
        Don't load compiled fasl files when loading the development
        environment under Larceny.  This is useful under Petit Larceny
        if the executable gets out of sync with the fasl files.

[4] The quotation marks around "./larceny.bin" are a uniform syntax that
works on both Microsoft Windows and UNIX-like shells.  The reason is
left as an exercise for the reader.
