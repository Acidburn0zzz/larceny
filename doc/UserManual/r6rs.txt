Larceny implements the
http://www-swiss.ai.mit.edu/~jaffer/r5rs_toc.html[R5RS]
with some http://www.r6rs.org/[R6RS] extensions.

If a feature of the http://www.r6rs.org/[R6RS] is not
mentioned in this chapter, then the current version of
Larceny probably does not support it.
In particular, Larceny does not yet support the R6RS
library or exception systems.
When Larceny is said to support an R6RS procedure, that
means the procedure is present in Larceny's standard
heap and will behave as specified by the R6RS so long
as no exception is raised.

Lexical syntax
~~~~~~~~~~~~~~

Larceny is now case-sensitive by default.
This is controlled by Larceny's case-sensitive? parameter,
which is affected by the #!r6rs, #!r5rs, #!larceny,
#!fold-case, and #!no-fold-case flags.
For the current semantics of these flags, please consult
the Larceny developers' web page that describes
http://larceny.ccs.neu.edu/larceny-trac/wiki/LexicalConversion[Larceny's
lexical syntax].

Apart from case-sensitivity, Larceny extends both R5RS lexical
syntax and the lexical syntax proposed by the current draft
http://www.r6rs.org/[R6RS].
The draft R6RS does not permit extensions, however, so Larceny
provides several mechanisms for turning its extensions on and
off.
For details, please consult the web page cited above.

Base library
~~~~~~~~~~~~

Larceny does not support identifier-syntax.

All of the other R6RS base library syntaxes and procedures
are present in Larceny, with the following known deviations
from R6RS semantics.  These deviations should be fixed in
a future release.

Larceny's equal? procedure may still go into an infinite
loop when comparing circular structures.

In Larceny v0.94, the imaginary part of an inexact real is
inexact.  Some of the algebraic and transcendental functions
do not yet behave as specified by the R6RS, especially with
regard to branch cuts.

The number->string and string->number procedures do not
yet support mantissa widths.

Larceny's implementation of dynamic-wind satisfies the
R5RS semantics but not the more stringent R6RS semantics.

Larceny's quasiquote does not yet support generalizations
and new requirements added by the R6RS.

The semantics of let-syntax and letrec-syntax differ between
the R5RS and the R6RS.  Larceny still supports the R5RS
semantics.

Unicode
~~~~~~~

Larceny supports all features of the R6RS unicode library.

[[BytevectorsLibrary]]
Bytevectors
~~~~~~~~~~~

Larceny supports all procedures of the R6RS bytevectors
library.

The endianness syntax is supported but deprecated.
In Larceny, any symbol names a supported endianness.
The symbols big and little have their expected meanings.
All other symbols mean (native-endianness) with respect
to integer operations, but mean the opposite of
(native-endianness) with respect to IEEE-754 operations.
For string operations, the endianness must be the symbol
big or the symbol little.  All of these extensions are
permitted by the current draft R6RS.

The utf16->string and utf32->string procedures do not
yet support the optional third argument.

Lists
~~~~~

Larceny supports only a few procedures of the R6RS lists
library: filter, remp, remove, remv, remq, memp, member,
memv, memq, assoc, assv, assq.  (The assp procedure's
absence is probably just a bug.)

Sorting
~~~~~~~

Larceny does not yet support any of the three procedures
that comprise the R6RS sorting library.  (Larceny's
traditional sort procedure is sort of like the R6RS
list-sort, but takes its arguments in the reverse order.)

Control
~~~~~~~

Larceny supports all four syntaxes of the R6RS control
library.

Records
~~~~~~~

Larceny does not support the R6RS records syntactic
library.

(We would have deprecated the syntactic layer
of the R5.96RS draft because it does not interoperate
well with the procedural layer.  The syntactic layer
described by the R5.97RS draft appears to be better,
improvement, but the note that follows the first
paragraph of the specification of the parent-rtd
clause is simply untrue.  In particular, Larceny
would not have to generate any code at run time.)

Larceny supports all procedures exported by the
R6RS records procedural and R6RS records inspection
libraries, but does not support inheritance for
R6RS records.

(Larceny's representations would
support inheritance just fine, but we were unable
to make sense of make-record-constructor-descriptor
as described by the R5.93RS draft.  Larceny's
traditional records continue to support inheritance.)

Input and output
~~~~~~~~~~~~~~~~

Larceny supports most features of the R6RS io ports,
R6RS io simple, and R6RS files libraries.

Larceny provides the file-options syntax, but it does
nothing useful because Larceny always behaves as though
the file options were (file-options no-fail).

The buffer-mode, eol-style, and error-handling-mode
syntaxes are supported but deprecated.  We recommend
quote be used instead.

Larceny supports four distinct buffer modes: none,
line, datum, and block.  The draft R6RS requires the
buffer-mode syntax to raise an exception for the
datum buffer mode, which is the buffer mode Larceny
uses for interactive output ports.

In Larceny, any symbol names a supported end-of-line
style.  All end-of-line and error-handling-mode symbols
whose meanings are not described by the R6RS have
locale-dependent meanings, which is an extension
permitted by the current draft R6RS.

Larceny does not yet support the UTF-16 codec.

The set-port-position! procedure is present, but
none of Larceny's ports support it.

Larceny does not yet support standard-input-port
and standard-output-port.

Larceny does not yet support custom textual ports.

Larceny does not yet support combined input/output
ports.

The get-bytevector-some procedure is present but
deprecated.

Larceny does not yet support current-error-port.

