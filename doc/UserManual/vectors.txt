Vectors
~~~~~~~

proc:vector-copy[args="vector",result="vector"]

Returns a shallow copy of its argument. 

_Operations on vector-like structures_

proctempl:vector-like?[args="object",result="boolean"]
proctempl:vector-like-length[args="vector-like",result="fixnum"]
proctempl:vector-like-ref[args="vector-like k",result="object"]
proctempl:vector-like-set![args="vector-like k object",result="unspecified"]

A vector-like structure is a low-level representation on which data
that are indexable like vectors are built, e.g., vectors, structures,
symbols, and ports.

There is no way of constructing a "generic" vector-like structure; use
the constructors for the data types mapped onto vector-like structures
instead, like make-vector.

The vector-like operations operate on all vector-like structures.
All are integrable.
All are deprecated because they
violate abstraction barriers and make your code
representation-independent; they are useful mainly to
Larceny developers, who might otherwise be tempted to
write some low-level operations in C or assembly language.
